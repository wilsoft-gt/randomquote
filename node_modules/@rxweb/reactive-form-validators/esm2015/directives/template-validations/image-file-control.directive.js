var ImageFileControlDirective_1;
import * as tslib_1 from "tslib";
import { Input, Directive, forwardRef, ElementRef } from '@angular/core';
import { NG_ASYNC_VALIDATORS } from '@angular/forms';
import { APP_VALIDATORS } from "../../const/app-validators.const";
const VALIDATOR_CONFIG = "validatorConfig";
let ImageFileControlDirective = ImageFileControlDirective_1 = class ImageFileControlDirective {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.isProcessed = false;
        this.element = elementRef.nativeElement;
    }
    set image(config) {
        this.imageValidation = APP_VALIDATORS.image(config);
    }
    setConfig(control) {
        let image = "image";
        if (!this[image] && control[VALIDATOR_CONFIG] && control[VALIDATOR_CONFIG][image])
            this[image] = control[VALIDATOR_CONFIG][image];
        this.isProcessed = true;
    }
    validate(control) {
        if (!this.isProcessed)
            this.setConfig(control);
        if (this.imageValidation) {
            return this.imageValidation(control, this.element.files);
        }
        return new Promise((resolve, reject) => { resolve(null); });
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], ImageFileControlDirective.prototype, "image", null);
ImageFileControlDirective = ImageFileControlDirective_1 = tslib_1.__decorate([
    Directive({
        selector: "input[type=file]",
        providers: [{
                provide: NG_ASYNC_VALIDATORS,
                useExisting: forwardRef(() => ImageFileControlDirective_1),
                multi: true
            }]
    }),
    tslib_1.__metadata("design:paramtypes", [ElementRef])
], ImageFileControlDirective);
export { ImageFileControlDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2UtZmlsZS1jb250cm9sLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0ByeHdlYi9yZWFjdGl2ZS1mb3JtLXZhbGlkYXRvcnMvIiwic291cmNlcyI6WyJkaXJlY3RpdmVzL3RlbXBsYXRlLXZhbGlkYXRpb25zL2ltYWdlLWZpbGUtY29udHJvbC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxPQUFPLEVBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3RFLE9BQU8sRUFBb0MsbUJBQW1CLEVBQWlCLE1BQU0sZ0JBQWdCLENBQUM7QUFFdEcsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQ2xFLE1BQU0sZ0JBQWdCLEdBQUcsaUJBQWlCLENBQUM7QUFTM0MsSUFBYSx5QkFBeUIsaUNBQXRDLE1BQWEseUJBQXlCO0lBVWxDLFlBQW9CLFVBQXNCO1FBQXRCLGVBQVUsR0FBVixVQUFVLENBQVk7UUFSMUMsZ0JBQVcsR0FBVyxLQUFLLENBQUM7UUFTeEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxVQUFVLENBQUMsYUFBcUIsQ0FBQztJQUNwRCxDQUFDO0lBTlEsSUFBSSxLQUFLLENBQUMsTUFBa0I7UUFDbkMsSUFBSSxDQUFDLGVBQWUsR0FBRyxjQUFjLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFNRCxTQUFTLENBQUMsT0FBdUI7UUFDN0IsSUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDO1FBQ3BCLElBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksT0FBTyxDQUFDLGdCQUFnQixDQUFDLElBQUksT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUMsS0FBSyxDQUFDO1lBQzlFLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNuRCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztJQUMxQixDQUFDO0lBRUQsUUFBUSxDQUFDLE9BQXdCO1FBQy9CLElBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVztZQUNsQixJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzFCLElBQUcsSUFBSSxDQUFDLGVBQWUsRUFBQztZQUNwQixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxFQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDM0Q7UUFDRCxPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDN0QsQ0FBQztDQUNKLENBQUE7QUF2Qlk7SUFBUixLQUFLLEVBQUU7OztzREFFUDtBQVJRLHlCQUF5QjtJQVJyQyxTQUFTLENBQUM7UUFDUCxRQUFRLEVBQUUsa0JBQWtCO1FBQzVCLFNBQVMsRUFBRSxDQUFDO2dCQUNSLE9BQU8sRUFBRSxtQkFBbUI7Z0JBQzVCLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsMkJBQXlCLENBQUM7Z0JBQ3hELEtBQUssRUFBRSxJQUFJO2FBQ2QsQ0FBQztLQUNMLENBQUM7NkNBV2tDLFVBQVU7R0FWakMseUJBQXlCLENBNkJyQztTQTdCWSx5QkFBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0lucHV0LCBEaXJlY3RpdmUgLGZvcndhcmRSZWYsRWxlbWVudFJlZn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7VmFsaWRhdGlvbkVycm9ycywgQWJzdHJhY3RDb250cm9sLCBOR19BU1lOQ19WQUxJREFUT1JTLEFzeW5jVmFsaWRhdG9yIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQge0ltYWdlQ29uZmlnfSBmcm9tICcuLi8uLi9tb2RlbHMvY29uZmlnJ1xyXG5pbXBvcnQgeyBBUFBfVkFMSURBVE9SUyB9IGZyb20gXCIuLi8uLi9jb25zdC9hcHAtdmFsaWRhdG9ycy5jb25zdFwiO1xyXG5jb25zdCBWQUxJREFUT1JfQ09ORklHID0gXCJ2YWxpZGF0b3JDb25maWdcIjtcclxuQERpcmVjdGl2ZSh7XHJcbiAgICBzZWxlY3RvcjogXCJpbnB1dFt0eXBlPWZpbGVdXCIsXHJcbiAgICBwcm92aWRlcnM6IFt7XHJcbiAgICAgICAgcHJvdmlkZTogTkdfQVNZTkNfVkFMSURBVE9SUyxcclxuICAgICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBJbWFnZUZpbGVDb250cm9sRGlyZWN0aXZlKSxcclxuICAgICAgICBtdWx0aTogdHJ1ZVxyXG4gICAgfV1cclxufSlcclxuZXhwb3J0IGNsYXNzIEltYWdlRmlsZUNvbnRyb2xEaXJlY3RpdmUgaW1wbGVtZW50cyBBc3luY1ZhbGlkYXRvciAge1xyXG4gICAgZWxlbWVudDphbnlcclxuICAgIGlzUHJvY2Vzc2VkOmJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICBwcml2YXRlIGltYWdlVmFsaWRhdGlvbjpGdW5jdGlvbjtcclxuXHJcbiAgICBASW5wdXQoKSBzZXQgaW1hZ2UoY29uZmlnOkltYWdlQ29uZmlnKXtcclxuICAgICAgdGhpcy5pbWFnZVZhbGlkYXRpb24gPSBBUFBfVkFMSURBVE9SUy5pbWFnZShjb25maWcpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZil7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50IGFzIE5vZGU7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0Q29uZmlnKGNvbnRyb2w6QWJzdHJhY3RDb250cm9sKXtcclxuICAgICAgICBsZXQgaW1hZ2UgPSBcImltYWdlXCI7XHJcbiAgICAgICAgaWYoIXRoaXNbaW1hZ2VdICYmIGNvbnRyb2xbVkFMSURBVE9SX0NPTkZJR10gJiYgY29udHJvbFtWQUxJREFUT1JfQ09ORklHXVtpbWFnZV0pXHJcbiAgICAgICAgICB0aGlzW2ltYWdlXSA9IGNvbnRyb2xbVkFMSURBVE9SX0NPTkZJR11baW1hZ2VdO1xyXG4gICAgICB0aGlzLmlzUHJvY2Vzc2VkID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICB2YWxpZGF0ZShjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiBQcm9taXNlPFZhbGlkYXRpb25FcnJvcnMgfCBudWxsPiB7XHJcbiAgICAgIGlmKCF0aGlzLmlzUHJvY2Vzc2VkKVxyXG4gICAgICAgIHRoaXMuc2V0Q29uZmlnKGNvbnRyb2wpO1xyXG4gICAgICBpZih0aGlzLmltYWdlVmFsaWRhdGlvbil7XHJcbiAgICAgICAgICByZXR1cm4gdGhpcy5pbWFnZVZhbGlkYXRpb24oY29udHJvbCx0aGlzLmVsZW1lbnQuZmlsZXMpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7IHJlc29sdmUobnVsbCk7IH0pXHJcbiAgICB9ICAgIFxyXG59XHJcbiJdfQ==