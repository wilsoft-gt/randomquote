import { RegexValidator } from '../util/regex-validator';
const OBJECT = "object";
const BOOLEAN = "boolean";
export class FormDataProvider {
    convertToFormData(jObject) {
        return this.convertFormData(jObject);
    }
    convertFormData(jObject, currentFormData, parentKey) {
        let formData = currentFormData || new FormData();
        let propName = '';
        for (var columnName in jObject) {
            propName = !parentKey ? columnName : `${parentKey}[${columnName}]`;
            if (Array.isArray(jObject[columnName])) {
                jObject[columnName].forEach((row, index) => {
                    propName = `${columnName}[${index}]`;
                    if (typeof row === OBJECT)
                        this.convertFormData(row, formData, propName);
                    else
                        this.nonObjectValueBind(row, formData, propName);
                });
            }
            else if (jObject[columnName] !== null && !(jObject[columnName] instanceof Date) && typeof jObject[columnName] === OBJECT && !(jObject[columnName] instanceof File || jObject[columnName] instanceof FileList)) {
                this.convertFormData(jObject[columnName], formData, propName);
            }
            else {
                this.nonObjectValueBind(jObject[columnName], formData, propName);
            }
        }
        return formData;
    }
    nonObjectValueBind(value, formData, propName) {
        if (typeof value === BOOLEAN) {
            let formValue = value ? true : false;
            formData.append(propName, formValue);
        }
        else if (value instanceof FileList) {
            for (var i = 0; i < value.length; i++) {
                formData.append(`${propName}[${i}]`, value.item(i));
            }
        }
        else {
            if (RegexValidator.isNotBlank(value))
                formData.append(propName, value);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1kYXRhLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHJ4d2ViL3JlYWN0aXZlLWZvcm0tdmFsaWRhdG9ycy8iLCJzb3VyY2VzIjpbImRvbWFpbi9mb3JtLWRhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHlCQUF5QixDQUFBO0FBQ3hELE1BQU0sTUFBTSxHQUFXLFFBQVEsQ0FBQztBQUNoQyxNQUFNLE9BQU8sR0FBVyxTQUFTLENBQUM7QUFDbEMsTUFBTSxPQUFPLGdCQUFnQjtJQUV6QixpQkFBaUIsQ0FBQyxPQUEyQjtRQUN6QyxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUVELGVBQWUsQ0FBQyxPQUErQixFQUFFLGVBQTBCLEVBQUUsU0FBa0I7UUFDM0YsSUFBSSxRQUFRLEdBQUcsZUFBZSxJQUFJLElBQUksUUFBUSxFQUFFLENBQUM7UUFDakQsSUFBSSxRQUFRLEdBQVUsRUFBRSxDQUFDO1FBQ3pCLEtBQUssSUFBSSxVQUFVLElBQUksT0FBTyxFQUFFO1lBQzVCLFFBQVEsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLFNBQVMsSUFBSSxVQUFVLEdBQUcsQ0FBQztZQUNuRSxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUU7Z0JBQ3BDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLEVBQUU7b0JBQ3ZDLFFBQVEsR0FBRyxHQUFHLFVBQVUsSUFBSSxLQUFLLEdBQUcsQ0FBQztvQkFDckMsSUFBSSxPQUFPLEdBQUcsS0FBSyxNQUFNO3dCQUNyQixJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUM7O3dCQUU5QyxJQUFJLENBQUMsa0JBQWtCLENBQUMsR0FBRyxFQUFFLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQztnQkFDekQsQ0FBQyxDQUFDLENBQUE7YUFDTDtpQkFBTSxJQUFJLE9BQU8sQ0FBQyxVQUFVLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsWUFBWSxJQUFJLENBQUMsSUFBSSxPQUFPLE9BQU8sQ0FBQyxVQUFVLENBQUMsS0FBSyxNQUFNLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsWUFBWSxJQUFJLElBQUksT0FBTyxDQUFDLFVBQVUsQ0FBQyxZQUFZLFFBQVEsQ0FBQyxFQUFFO2dCQUM3TSxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsRUFBQyxRQUFRLEVBQUMsUUFBUSxDQUFDLENBQUE7YUFDOUQ7aUJBQU07Z0JBQ0gsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsRUFBRSxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUM7YUFDcEU7U0FDSjtRQUNELE9BQU8sUUFBUSxDQUFDO0lBQ3BCLENBQUM7SUFFRCxrQkFBa0IsQ0FBQyxLQUFTLEVBQUMsUUFBaUIsRUFBQyxRQUFlO1FBQzFELElBQUksT0FBTyxLQUFLLEtBQUssT0FBTyxFQUFFO1lBQzFCLElBQUksU0FBUyxHQUFRLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7WUFDMUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsU0FBUyxDQUFDLENBQUM7U0FDeEM7YUFBTSxJQUFJLEtBQUssWUFBWSxRQUFRLEVBQUU7WUFDbEMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ25DLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxRQUFRLElBQUksQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ3ZEO1NBQ0o7YUFBTTtZQUNILElBQUksY0FBYyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUM7Z0JBQ2hDLFFBQVEsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQ3hDO0lBQ0wsQ0FBQztDQUVKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVnZXhWYWxpZGF0b3IgfSBmcm9tICcuLi91dGlsL3JlZ2V4LXZhbGlkYXRvcidcclxuY29uc3QgT0JKRUNUOiBzdHJpbmcgPSBcIm9iamVjdFwiO1xyXG5jb25zdCBCT09MRUFOOiBzdHJpbmcgPSBcImJvb2xlYW5cIjtcclxuZXhwb3J0IGNsYXNzIEZvcm1EYXRhUHJvdmlkZXJ7XHJcblxyXG4gICAgY29udmVydFRvRm9ybURhdGEoak9iamVjdDoge1trZXk6c3RyaW5nXTphbnl9KTpGb3JtRGF0YSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udmVydEZvcm1EYXRhKGpPYmplY3QpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnZlcnRGb3JtRGF0YShqT2JqZWN0OiB7IFtrZXk6IHN0cmluZ106IGFueSB9LCBjdXJyZW50Rm9ybURhdGE/OiBGb3JtRGF0YSwgcGFyZW50S2V5Pzogc3RyaW5nKTpGb3JtRGF0YSB7XHJcbiAgICAgICAgbGV0IGZvcm1EYXRhID0gY3VycmVudEZvcm1EYXRhIHx8IG5ldyBGb3JtRGF0YSgpO1xyXG4gICAgICAgIGxldCBwcm9wTmFtZTpzdHJpbmcgPSAnJztcclxuICAgICAgICBmb3IgKHZhciBjb2x1bW5OYW1lIGluIGpPYmplY3QpIHtcclxuICAgICAgICAgICAgcHJvcE5hbWUgPSAhcGFyZW50S2V5ID8gY29sdW1uTmFtZSA6IGAke3BhcmVudEtleX1bJHtjb2x1bW5OYW1lfV1gO1xyXG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShqT2JqZWN0W2NvbHVtbk5hbWVdKSkge1xyXG4gICAgICAgICAgICAgICAgak9iamVjdFtjb2x1bW5OYW1lXS5mb3JFYWNoKChyb3csIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvcE5hbWUgPSBgJHtjb2x1bW5OYW1lfVske2luZGV4fV1gO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygcm93ID09PSBPQkpFQ1QpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udmVydEZvcm1EYXRhKHJvdywgZm9ybURhdGEsIHByb3BOYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm9uT2JqZWN0VmFsdWVCaW5kKHJvdywgZm9ybURhdGEsIHByb3BOYW1lKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoak9iamVjdFtjb2x1bW5OYW1lXSAhPT0gbnVsbCAmJiAhKGpPYmplY3RbY29sdW1uTmFtZV0gaW5zdGFuY2VvZiBEYXRlKSAmJiB0eXBlb2Ygak9iamVjdFtjb2x1bW5OYW1lXSA9PT0gT0JKRUNUICYmICEoak9iamVjdFtjb2x1bW5OYW1lXSBpbnN0YW5jZW9mIEZpbGUgfHwgak9iamVjdFtjb2x1bW5OYW1lXSBpbnN0YW5jZW9mIEZpbGVMaXN0KSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb252ZXJ0Rm9ybURhdGEoak9iamVjdFtjb2x1bW5OYW1lXSxmb3JtRGF0YSxwcm9wTmFtZSlcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubm9uT2JqZWN0VmFsdWVCaW5kKGpPYmplY3RbY29sdW1uTmFtZV0sIGZvcm1EYXRhLCBwcm9wTmFtZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZvcm1EYXRhO1xyXG4gICAgfVxyXG5cclxuICAgIG5vbk9iamVjdFZhbHVlQmluZCh2YWx1ZTphbnksZm9ybURhdGE6Rm9ybURhdGEscHJvcE5hbWU6c3RyaW5nKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gQk9PTEVBTikge1xyXG4gICAgICAgICAgICBsZXQgZm9ybVZhbHVlOiBhbnkgPSB2YWx1ZSA/IHRydWUgOiBmYWxzZTtcclxuICAgICAgICAgICAgZm9ybURhdGEuYXBwZW5kKHByb3BOYW1lLCBmb3JtVmFsdWUpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBGaWxlTGlzdCkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoYCR7cHJvcE5hbWV9WyR7aX1dYCwgdmFsdWUuaXRlbShpKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoUmVnZXhWYWxpZGF0b3IuaXNOb3RCbGFuayh2YWx1ZSkpXHJcbiAgICAgICAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQocHJvcE5hbWUsIHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59Il19