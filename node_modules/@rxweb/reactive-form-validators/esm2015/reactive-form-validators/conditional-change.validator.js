import { ObjectMaker } from "../util/object-maker";
import { ApplicationUtil } from "../util/app-util";
export function conditionalChangeValidator(conditionalValidationProps) {
    var timeOuts = [];
    var oldValue = undefined;
    var setTimeOut = (control) => {
        var timeOut = setTimeout(t => {
            clearTimeout(timeOut);
            control.updateValueAndValidity();
        }, 100);
    };
    return (control) => {
        let value = control.value;
        if (control.parent && oldValue != value) {
            const rootFormGroup = ApplicationUtil.getRootFormGroup(control);
            const parentFormGroup = control.parent;
            oldValue = value;
            timeOuts = [];
            conditionalValidationProps.forEach(t => {
                let a = control;
                if (t.indexOf("[]") != -1) {
                    var splitText = t.split("[]");
                    var formArray = rootFormGroup.get([splitText[0]]);
                    if (formArray)
                        formArray.controls.forEach(formGroup => {
                            var abstractControl = formGroup.get(splitText[1]);
                            if (abstractControl) {
                                setTimeOut(abstractControl);
                            }
                        });
                }
                else {
                    let splitText = t.split('.');
                    if (splitText.length > 1) {
                        var control = null;
                        t.split('.').forEach((name, index) => { control = (index == 0) ? rootFormGroup.controls[name] : control.controls[name]; });
                    }
                    else {
                        control = parentFormGroup.controls[t];
                    }
                    if (control) {
                        setTimeOut(control);
                    }
                }
            });
        }
        return ObjectMaker.null();
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZGl0aW9uYWwtY2hhbmdlLnZhbGlkYXRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0ByeHdlYi9yZWFjdGl2ZS1mb3JtLXZhbGlkYXRvcnMvIiwic291cmNlcyI6WyJyZWFjdGl2ZS1mb3JtLXZhbGlkYXRvcnMvY29uZGl0aW9uYWwtY2hhbmdlLnZhbGlkYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFPQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbkQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGtCQUFrQixDQUFBO0FBR2xELE1BQU0sVUFBVSwwQkFBMEIsQ0FBQywwQkFBb0M7SUFDN0UsSUFBSSxRQUFRLEdBQWEsRUFBRSxDQUFDO0lBQzVCLElBQUksUUFBUSxHQUFXLFNBQVMsQ0FBQztJQUNqQyxJQUFJLFVBQVUsR0FBRyxDQUFDLE9BQXdCLEVBQUUsRUFBRTtRQUM1QyxJQUFJLE9BQU8sR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDM0IsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3RCLE9BQU8sQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO1FBQ25DLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQTtJQUNULENBQUMsQ0FBQTtJQUNELE9BQU8sQ0FBQyxPQUF3QixFQUEwQixFQUFFO1FBQzFELElBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUM7UUFDMUIsSUFBSSxPQUFPLENBQUMsTUFBTSxJQUFJLFFBQVEsSUFBSSxLQUFLLEVBQUU7WUFDckMsTUFBTSxhQUFhLEdBQUcsZUFBZSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ2hFLE1BQU0sZUFBZSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUM7WUFFekMsUUFBUSxHQUFHLEtBQUssQ0FBQztZQUNqQixRQUFRLEdBQUcsRUFBRSxDQUFDO1lBQ2QsMEJBQTBCLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUNyQyxJQUFJLENBQUMsR0FBRyxPQUFPLENBQUM7Z0JBQ2hCLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRTtvQkFDdkIsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztvQkFDaEMsSUFBSSxTQUFTLEdBQWMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQzdELElBQUksU0FBUzt3QkFDWCxTQUFTLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBRTs0QkFDckMsSUFBSSxlQUFlLEdBQUcsU0FBUyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzs0QkFDbEQsSUFBSSxlQUFlLEVBQUU7Z0NBQ25CLFVBQVUsQ0FBQyxlQUFlLENBQUMsQ0FBQzs2QkFDN0I7d0JBQ0gsQ0FBQyxDQUFDLENBQUE7aUJBQ0w7cUJBQU07b0JBRUgsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztvQkFDN0IsSUFBRyxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBQzt3QkFDdEIsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDO3dCQUNuQixDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRSxHQUFHLE9BQU8sR0FBRyxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO3FCQUMzSDt5QkFDRTt3QkFDSCxPQUFPLEdBQUcsZUFBZSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztxQkFDdkM7b0JBRUQsSUFBSSxPQUFPLEVBQUU7d0JBQ1gsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO3FCQUNyQjtpQkFDRjtZQUNILENBQUMsQ0FBQyxDQUFBO1NBQ0g7UUFDRCxPQUFPLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUM1QixDQUFDLENBQUE7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBWYWxpZGF0b3JGbixcclxuICBBYnN0cmFjdENvbnRyb2wsXHJcblxyXG4gIEZvcm1BcnJheVxyXG59IGZyb20gXCJAYW5ndWxhci9mb3Jtc1wiO1xyXG5cclxuaW1wb3J0IHsgT2JqZWN0TWFrZXIgfSBmcm9tIFwiLi4vdXRpbC9vYmplY3QtbWFrZXJcIjtcclxuaW1wb3J0IHsgQXBwbGljYXRpb25VdGlsIH0gZnJvbSBcIi4uL3V0aWwvYXBwLXV0aWxcIlxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjb25kaXRpb25hbENoYW5nZVZhbGlkYXRvcihjb25kaXRpb25hbFZhbGlkYXRpb25Qcm9wczogc3RyaW5nW10pOiBWYWxpZGF0b3JGbiB7XHJcbiAgdmFyIHRpbWVPdXRzOiBudW1iZXJbXSA9IFtdO1xyXG4gIHZhciBvbGRWYWx1ZTogc3RyaW5nID0gdW5kZWZpbmVkO1xyXG4gIHZhciBzZXRUaW1lT3V0ID0gKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCkgPT4ge1xyXG4gICAgdmFyIHRpbWVPdXQgPSBzZXRUaW1lb3V0KHQgPT4ge1xyXG4gICAgICBjbGVhclRpbWVvdXQodGltZU91dCk7XHJcbiAgICAgIGNvbnRyb2wudXBkYXRlVmFsdWVBbmRWYWxpZGl0eSgpO1xyXG4gICAgfSwgMTAwKVxyXG4gIH1cclxuICByZXR1cm4gKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCk6IHsgW2tleTogc3RyaW5nXTogYW55IH0gPT4ge1xyXG4gICAgbGV0IHZhbHVlID0gY29udHJvbC52YWx1ZTtcclxuICAgIGlmIChjb250cm9sLnBhcmVudCAmJiBvbGRWYWx1ZSAhPSB2YWx1ZSkge1xyXG4gICAgICAgIGNvbnN0IHJvb3RGb3JtR3JvdXAgPSBBcHBsaWNhdGlvblV0aWwuZ2V0Um9vdEZvcm1Hcm91cChjb250cm9sKTtcclxuICAgICAgICBjb25zdCBwYXJlbnRGb3JtR3JvdXAgPSBjb250cm9sLnBhcmVudDtcclxuXHJcbiAgICAgIG9sZFZhbHVlID0gdmFsdWU7XHJcbiAgICAgIHRpbWVPdXRzID0gW107XHJcbiAgICAgIGNvbmRpdGlvbmFsVmFsaWRhdGlvblByb3BzLmZvckVhY2godCA9PiB7XHJcbiAgICAgICAgbGV0IGEgPSBjb250cm9sO1xyXG4gICAgICAgIGlmICh0LmluZGV4T2YoXCJbXVwiKSAhPSAtMSkge1xyXG4gICAgICAgICAgICB2YXIgc3BsaXRUZXh0ID0gdC5zcGxpdChcIltdXCIpO1xyXG4gICAgICAgICAgdmFyIGZvcm1BcnJheSA9IDxGb3JtQXJyYXk+cm9vdEZvcm1Hcm91cC5nZXQoW3NwbGl0VGV4dFswXV0pO1xyXG4gICAgICAgICAgaWYgKGZvcm1BcnJheSlcclxuICAgICAgICAgICAgZm9ybUFycmF5LmNvbnRyb2xzLmZvckVhY2goZm9ybUdyb3VwID0+IHtcclxuICAgICAgICAgICAgICB2YXIgYWJzdHJhY3RDb250cm9sID0gZm9ybUdyb3VwLmdldChzcGxpdFRleHRbMV0pO1xyXG4gICAgICAgICAgICAgIGlmIChhYnN0cmFjdENvbnRyb2wpIHtcclxuICAgICAgICAgICAgICAgIHNldFRpbWVPdXQoYWJzdHJhY3RDb250cm9sKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGxldCBzcGxpdFRleHQgPSB0LnNwbGl0KCcuJyk7XHJcbiAgICAgICAgICAgIGlmKHNwbGl0VGV4dC5sZW5ndGggPiAxKXtcclxuICAgICAgICAgICAgICB2YXIgY29udHJvbCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgdC5zcGxpdCgnLicpLmZvckVhY2goKG5hbWUsIGluZGV4KSA9PiB7IGNvbnRyb2wgPSAoaW5kZXggPT0gMCkgPyByb290Rm9ybUdyb3VwLmNvbnRyb2xzW25hbWVdIDogY29udHJvbC5jb250cm9sc1tuYW1lXTsgfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnRyb2wgPSBwYXJlbnRGb3JtR3JvdXAuY29udHJvbHNbdF07XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIGlmIChjb250cm9sKSB7XHJcbiAgICAgICAgICAgIHNldFRpbWVPdXQoY29udHJvbCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIE9iamVjdE1ha2VyLm51bGwoKTtcclxuICB9XHJcbn1cclxuIl19