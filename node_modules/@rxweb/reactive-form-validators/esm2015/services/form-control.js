import { FormControl } from "@angular/forms";
import { ObjectMaker } from "../util/object-maker";
import { MESSAGE, CONTROLS_ERROR, VALUE_CHANGED_SYNC } from '../const';
import { ApplicationUtil } from '../util/app-util';
import { DisableProvider } from '../domain/disable-provider';
import { RXCODE, MODEL_INSTANCE, PATCH } from "../const/app.const";
import { DECORATORS } from "../const/decorators.const";
import { defaultContainer } from "../core/defaultContainer";
import { SANITIZERS } from "../util/sanitizers";
import { ErrorMessageBindingStrategy } from "../enums";
import { ReactiveFormConfig } from "../util/reactive-form-config";
const DIRTY = "dirty";
const TOUCHED = "touched";
const UNTOUCHED = "untouched";
const PRISTINE = "pristine";
const PENDING = "pending";
export class RxFormControl extends FormControl {
    constructor(formState, validator, asyncValidator, entityObject, baseObject, controlName, _sanitizers) {
        super(formState, validator, asyncValidator);
        this.entityObject = entityObject;
        this.baseObject = baseObject;
        this._sanitizers = _sanitizers;
        this._errorMessages = [];
        this._childColumns = [];
        this._refDisableControls = [];
        this._refMessageControls = [];
        this._refClassNameControls = [];
        this._isPassedExpression = false;
        this._baseValue = formState === undefined ? null : this.getFormState(formState);
        this._isModified = false;
        this.keyName = controlName;
        this._errorMessageBindingStrategy = ReactiveFormConfig.get("reactiveForm.errorMessageBindingStrategy");
        if (this._sanitizers) {
            var floatSanitizer = this._sanitizers.filter(t => t.name == "toFloat")[0];
            if (floatSanitizer && this._baseValue && ReactiveFormConfig.number && ReactiveFormConfig.number.decimalSymbol == ",") {
                let baseValue = String(this._baseValue);
                if (baseValue.indexOf('.') != -1) {
                    this._baseValue = baseValue.replace(".", ReactiveFormConfig.number.decimalSymbol);
                    super.setValue(this._baseValue);
                }
            }
        }
    }
    get errors() {
        return this._errors;
    }
    set errors(value) {
        this._errors = value;
    }
    get errorMessages() {
        if (!this._messageExpression) {
            if (this._errorMessages.length == 0 && this.errors)
                this.setControlErrorMessages();
        }
        else if (this._messageExpression && !this._isPassedExpression)
            return [];
        if (!this.errors && this._errorMessages.length > 0)
            this.setControlErrorMessages();
        return this._errorMessages;
    }
    get errorMessage() {
        if (!this._messageExpression) {
            if (this._errorMessage == undefined && this.errors)
                this.setControlErrorMessages();
        }
        else if (this._messageExpression && !this._isPassedExpression)
            return undefined;
        if (!this.errors && this._errorMessage)
            this.setControlErrorMessages();
        return this._errorMessage;
    }
    getFormState(value) {
        let baseValue = value;
        if (Array.isArray(value)) {
            baseValue = [];
            value.forEach(t => baseValue.push(t));
        }
        return baseValue;
    }
    get isModified() {
        return this._isModified;
    }
    setValue(value, options) {
        let parsedValue = this.getSanitizedValue(value);
        if (options && options.dirty)
            this.baseObject[this.keyName] = value;
        this.entityObject[this.keyName] = parsedValue;
        super.setValue(value, options);
        this.bindError();
        this.bindClassName();
        this.executeExpressions();
        this.callPatch();
        if (options && !options.updateChanged && this.root[VALUE_CHANGED_SYNC]) {
            this.root[VALUE_CHANGED_SYNC]();
        }
    }
    getControlValue() {
        return this.getSanitizedValue(this.value);
    }
    bindError() {
        if (this._messageExpression)
            this._isPassedExpression = this.executeExpression(this._messageExpression, this);
        this.setControlErrorMessages();
        this.errors = this.errors;
    }
    bindClassName() {
        if (this.updateOnElementClass && typeof this.updateOnElementClass === "function") {
            let className = this.executeExpression(this._classNameExpression, this);
            let updateElement = this.updateOnElementClass;
            updateElement(className);
        }
    }
    markAsTouched(opts) {
        let currentState = this.touched;
        super.markAsTouched(opts);
        if (currentState != this.touched)
            this.runControlPropChangeExpression([TOUCHED, UNTOUCHED]);
    }
    markAsUntouched(opts) {
        let currentState = this.untouched;
        super.markAsUntouched(opts);
        if (currentState != this.untouched)
            this.runControlPropChangeExpression([UNTOUCHED, TOUCHED]);
    }
    markAsDirty(opts) {
        let currentState = this.dirty;
        super.markAsDirty(opts);
        if (currentState != this.dirty)
            this.runControlPropChangeExpression([DIRTY]);
    }
    markAsPristine(opts) {
        let currentState = this.pristine;
        super.markAsDirty(opts);
        if (currentState != this.pristine)
            this.runControlPropChangeExpression([PRISTINE]);
    }
    markAsPending(opts) {
        let currentState = this.pending;
        super.markAsDirty(opts);
        if (currentState != this.pending)
            this.runControlPropChangeExpression([PENDING]);
    }
    runControlPropChangeExpression(propNames) {
        propNames.forEach(name => {
            if ((this._controlProp && this._messageExpression && this._controlProp[name]) || (!this._messageExpression && this.checkErrorMessageStrategy()))
                this.bindError();
            if (this._classNameControlProp && this._classNameControlProp[name])
                this.bindClassName();
        });
    }
    refresh() {
        this.getMessageExpression(this.parent, this.keyName);
        this.bindConditionalControls(DECORATORS.disabled, "_refDisableControls");
        this.bindConditionalControls(DECORATORS.error, "_refMessageControls");
        this.bindConditionalControls(DECORATORS.elementClass, "_refClassNameControls");
        this.executeExpressions();
        this.bindError();
    }
    reset(value) {
        if (value !== undefined)
            this.setValue(value);
        else
            this.setValue(this.getFormState(this._baseValue));
    }
    commit() {
        this._baseValue = this.value;
        this.callPatch();
    }
    callPatch() {
        this._isModified = this.getValue(this._baseValue) != this.getValue(this.value);
        if (this.parent && this.parent[PATCH])
            this.parent[PATCH](this.keyName);
    }
    checkErrorMessageStrategy() {
        let isBind = true;
        switch (this._errorMessageBindingStrategy) {
            case ErrorMessageBindingStrategy.OnSubmit:
                isBind = this.parent.submitted;
                break;
            case ErrorMessageBindingStrategy.OnDirty:
                isBind = this.dirty;
                break;
            case ErrorMessageBindingStrategy.OnTouched:
                isBind = this.touched;
                break;
            case ErrorMessageBindingStrategy.OnDirtyOrTouched:
                isBind = this.dirty || this.touched;
                break;
            case ErrorMessageBindingStrategy.OnDirtyOrSubmit:
                isBind = this.dirty || this.parent.submitted;
                break;
            case ErrorMessageBindingStrategy.OnTouchedOrSubmit:
                isBind = this.touched || this.parent.submitted;
                break;
            default:
                isBind = true;
        }
        return isBind;
    }
    executeExpressions() {
        this.processExpression("_refDisableControls", "disabled");
        this.processExpression("_refMessageControls", "bindError");
        this.processExpression("_refClassNameControls", "bindClassName");
    }
    getMessageExpression(formGroup, keyName) {
        if (formGroup[MODEL_INSTANCE]) {
            let instanceContainer = defaultContainer.get(formGroup[MODEL_INSTANCE].constructor);
            if (instanceContainer) {
                this._messageExpression = instanceContainer.nonValidationDecorators.error.conditionalExpressions[keyName];
                this._controlProp = instanceContainer.nonValidationDecorators.error.controlProp[this.keyName];
                this._classNameExpression = instanceContainer.nonValidationDecorators.elementClass.conditionalExpressions[keyName];
                this._classNameControlProp = instanceContainer.nonValidationDecorators.elementClass.controlProp[keyName];
                if (this._classNameExpression)
                    this.updateOnElementClass = true;
            }
        }
    }
    getSanitizedValue(value) {
        if (this._sanitizers) {
            for (let sanitizer of this._sanitizers) {
                value = SANITIZERS[sanitizer.name](value, sanitizer.config);
            }
        }
        return value;
    }
    bindConditionalControls(decoratorType, refName) {
        this._disableProvider = new DisableProvider(decoratorType, this.entityObject);
        this[refName] = this._disableProvider.zeroArgumentProcess(this, this.keyName);
        this._disableProvider.oneArgumentProcess(this, `${this.keyName}${RXCODE}1`).forEach(t => this[refName].push(t));
    }
    setControlErrorMessages() {
        if ((!this._messageExpression && this.checkErrorMessageStrategy()) || this._isPassedExpression) {
            this._errorMessages = [];
            if (this.errors) {
                Object.keys(this.errors).forEach(t => {
                    if (this.parent) {
                        this.parent[CONTROLS_ERROR][this.keyName] = this._errorMessage = this.getErrorMessage(this.errors, t);
                        if (!this._errorMessage) {
                            let errorObject = ObjectMaker.toJson(t, undefined, [this.errors[t][t]]);
                            this.parent[CONTROLS_ERROR][this.keyName] = this._errorMessage = this.getErrorMessage(errorObject, t);
                        }
                    }
                    else
                        this._errorMessage = this.getErrorMessage(this.errors, t);
                    this._errorMessages.push(this._errorMessage);
                });
            }
            else {
                this._errorMessage = undefined;
                if (this.parent) {
                    this.parent[CONTROLS_ERROR][this.keyName] = undefined;
                    delete this.parent[CONTROLS_ERROR][this.keyName];
                }
            }
        }
        else {
            this._errorMessages = [];
            this._errorMessage = undefined;
        }
    }
    getErrorMessage(errorObject, keyName) {
        if (errorObject[keyName][MESSAGE])
            return errorObject[keyName][MESSAGE];
        return;
    }
    processExpression(propName, operationType) {
        if (this[propName])
            for (var controlInfo of this[propName]) {
                let control = controlInfo.isRoot ? ApplicationUtil.getControl(controlInfo.controlPath, ApplicationUtil.getRootFormGroup(this)) : ApplicationUtil.getFormControl(controlInfo.controlPath, this);
                if (control) {
                    if (operationType == "disabled") {
                        let result = this.executeExpression(controlInfo.conditionalExpression, control);
                        if (result)
                            control.disable();
                        else
                            control.enable();
                    }
                    else if (operationType == "bindError")
                        control.bindError();
                    else if (operationType == "bindClassName")
                        control.bindClassName();
                }
            }
    }
    executeExpression(expression, control) {
        return expression.call(control.parent[MODEL_INSTANCE], control, ApplicationUtil.getParentModelInstanceValue(this), control.parent[MODEL_INSTANCE]);
    }
    getValue(value) {
        return value !== undefined && value !== null && value !== "" ? value : "";
    }
}
//# sourceMappingURL=data:application/json;base64,