function isObjectType(value) {
    return !(typeof value == "string" || typeof value === "number" || typeof value === "boolean" || value instanceof Date);
}
function isObject(value) {
    return Object.prototype.toString.call(value) === '[object Object]';
}
export function clone(jsonObject) {
    let jObject = {};
    if (isObjectType(jsonObject)) {
        for (var columnName in jsonObject) {
            if (Array.isArray(jsonObject[columnName])) {
                jObject[columnName] = [];
                for (let row of jsonObject[columnName]) {
                    if (isObject(row))
                        jObject[columnName].push(clone(row));
                    else
                        jObject[columnName].push(row);
                }
            }
            else if (typeof jsonObject[columnName] == "object" && !(jsonObject[columnName] instanceof RegExp))
                jObject[columnName] = clone(jsonObject[columnName]);
            else
                jObject[columnName] = jsonObject[columnName];
        }
        return jObject;
    }
    else
        return jsonObject;
}
export function merge(firstObject, secondObject) {
    for (var columnName in secondObject) {
        if (Array.isArray(secondObject[columnName])) {
            if (!firstObject[columnName])
                firstObject[columnName] = [];
            for (let row of secondObject[columnName])
                firstObject[columnName].push(clone(row));
        }
        else if (typeof firstObject[columnName] == "object" && !(firstObject[columnName] instanceof RegExp))
            firstObject[columnName] = merge(firstObject[columnName], secondObject[columnName]);
        else
            firstObject[columnName] = secondObject[columnName];
    }
    return firstObject;
}
export function isMatched(jsonObject, compareObject) {
    let isModified = false;
    for (var columnName in compareObject) {
        if (Array.isArray(jsonObject[columnName])) {
            for (var i = 0; i < jsonObject[columnName].length; i++) {
                isModified = isMatched(jsonObject[columnName][i], compareObject[columnName][i]);
            }
        }
        else if (typeof jsonObject[columnName] == "object" && !(jsonObject[columnName] instanceof RegExp))
            isModified = isMatched(jsonObject[columnName], compareObject[columnName]);
        else
            isModified = !(jsonObject[columnName] == compareObject[columnName]);
        if (isModified)
            break;
    }
    return isModified;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5LnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Acnh3ZWIvcmVhY3RpdmUtZm9ybS12YWxpZGF0b3JzLyIsInNvdXJjZXMiOlsic2VydmljZXMvZW50aXR5LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsU0FBUyxZQUFZLENBQUMsS0FBUztJQUMzQixPQUFPLENBQUMsQ0FBQyxPQUFPLEtBQUssSUFBSSxRQUFRLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxJQUFJLE9BQU8sS0FBSyxLQUFLLFNBQVMsSUFBSSxLQUFLLFlBQVksSUFBSSxDQUFDLENBQUM7QUFDM0gsQ0FBQztBQUVELFNBQVMsUUFBUSxDQUFDLEtBQVU7SUFDeEIsT0FBTyxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssaUJBQWlCLENBQUM7QUFDdkUsQ0FBQztBQUVELE1BQU0sVUFBVSxLQUFLLENBQUMsVUFBa0M7SUFDcEQsSUFBSSxPQUFPLEdBQVEsRUFBRSxDQUFDO0lBQ3RCLElBQUksWUFBWSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1FBQzFCLEtBQUssSUFBSSxVQUFVLElBQUksVUFBVSxFQUFFO1lBQy9CLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRTtnQkFDdkMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQztnQkFDekIsS0FBSyxJQUFJLEdBQUcsSUFBSSxVQUFVLENBQUMsVUFBVSxDQUFDLEVBQUU7b0JBQ3BDLElBQUksUUFBUSxDQUFDLEdBQUcsQ0FBQzt3QkFDYixPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBOzt3QkFFcEMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQTtpQkFDcEM7YUFDSjtpQkFBTSxJQUFJLE9BQU8sVUFBVSxDQUFDLFVBQVUsQ0FBQyxJQUFJLFFBQVEsSUFBSSxDQUFDLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxZQUFZLE1BQU0sQ0FBQztnQkFDL0YsT0FBTyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQzs7Z0JBRXBELE9BQU8sQ0FBQyxVQUFVLENBQUMsR0FBRyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUE7U0FDbkQ7UUFDRCxPQUFPLE9BQU8sQ0FBQztLQUNsQjs7UUFFRyxPQUFPLFVBQVUsQ0FBQztBQUN0QixDQUFDO0FBRUwsTUFBTSxVQUFVLEtBQUssQ0FBQyxXQUFtQyxFQUFFLFlBQW9DO0lBQ3ZGLEtBQUssSUFBSSxVQUFVLElBQUksWUFBWSxFQUFFO1FBQ2pDLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRTtZQUN6QyxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQztnQkFDeEIsV0FBVyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNqQyxLQUFLLElBQUksR0FBRyxJQUFJLFlBQVksQ0FBQyxVQUFVLENBQUM7Z0JBQ3BDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7U0FDL0M7YUFBTSxJQUFJLE9BQU8sV0FBVyxDQUFDLFVBQVUsQ0FBQyxJQUFJLFFBQVEsSUFBSSxDQUFDLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxZQUFZLE1BQU0sQ0FBQztZQUNqRyxXQUFXLENBQUMsVUFBVSxDQUFDLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsRUFBRSxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQTs7WUFFbEYsV0FBVyxDQUFDLFVBQVUsQ0FBQyxHQUFHLFlBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQztLQUMxRDtJQUNELE9BQU8sV0FBVyxDQUFDO0FBQzNCLENBQUM7QUFFRCxNQUFNLFVBQVUsU0FBUyxDQUFDLFVBQWtDLEVBQUUsYUFBcUM7SUFDL0YsSUFBSSxVQUFVLEdBQVksS0FBSyxDQUFDO0lBQ2hDLEtBQUssSUFBSSxVQUFVLElBQUksYUFBYSxFQUFFO1FBQzlCLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRTtZQUN2QyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDcEQsVUFBVSxHQUFHLFNBQVMsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7YUFDbEY7U0FDSjthQUFNLElBQUksT0FBTyxVQUFVLENBQUMsVUFBVSxDQUFDLElBQUksUUFBUSxJQUFJLENBQUMsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLFlBQVksTUFBTSxDQUFDO1lBQy9GLFVBQVUsR0FBRyxTQUFTLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDOztZQUUxRSxVQUFVLEdBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsSUFBSSxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUN4RSxJQUFJLFVBQVU7WUFDVixNQUFNO0tBQ2pCO0lBQ0csT0FBTyxVQUFVLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGlzT2JqZWN0VHlwZSh2YWx1ZTphbnkpIHtcclxuICAgIHJldHVybiAhKHR5cGVvZiB2YWx1ZSA9PSBcInN0cmluZ1wiIHx8IHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIiB8fCB0eXBlb2YgdmFsdWUgPT09IFwiYm9vbGVhblwiIHx8IHZhbHVlIGluc3RhbmNlb2YgRGF0ZSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlOiBhbnkpOiBib29sZWFuIHtcclxuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBPYmplY3RdJztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNsb25lKGpzb25PYmplY3Q6IHsgW2tleTogc3RyaW5nXTogYW55IH0pIHtcclxuICAgIGxldCBqT2JqZWN0OiBhbnkgPSB7fTtcclxuICAgIGlmIChpc09iamVjdFR5cGUoanNvbk9iamVjdCkpIHtcclxuICAgICAgICBmb3IgKHZhciBjb2x1bW5OYW1lIGluIGpzb25PYmplY3QpIHtcclxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoanNvbk9iamVjdFtjb2x1bW5OYW1lXSkpIHtcclxuICAgICAgICAgICAgICAgIGpPYmplY3RbY29sdW1uTmFtZV0gPSBbXTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IHJvdyBvZiBqc29uT2JqZWN0W2NvbHVtbk5hbWVdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzT2JqZWN0KHJvdykpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGpPYmplY3RbY29sdW1uTmFtZV0ucHVzaChjbG9uZShyb3cpKVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgak9iamVjdFtjb2x1bW5OYW1lXS5wdXNoKHJvdylcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YganNvbk9iamVjdFtjb2x1bW5OYW1lXSA9PSBcIm9iamVjdFwiICYmICEoanNvbk9iamVjdFtjb2x1bW5OYW1lXSBpbnN0YW5jZW9mIFJlZ0V4cCkpXHJcbiAgICAgICAgICAgICAgICBqT2JqZWN0W2NvbHVtbk5hbWVdID0gY2xvbmUoanNvbk9iamVjdFtjb2x1bW5OYW1lXSk7XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIGpPYmplY3RbY29sdW1uTmFtZV0gPSBqc29uT2JqZWN0W2NvbHVtbk5hbWVdXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBqT2JqZWN0O1xyXG4gICAgfVxyXG4gICAgZWxzZVxyXG4gICAgICAgIHJldHVybiBqc29uT2JqZWN0O1xyXG4gICAgfVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlKGZpcnN0T2JqZWN0OiB7IFtrZXk6IHN0cmluZ106IGFueSB9LCBzZWNvbmRPYmplY3Q6IHsgW2tleTogc3RyaW5nXTogYW55IH0pIHtcclxuICAgICAgICBmb3IgKHZhciBjb2x1bW5OYW1lIGluIHNlY29uZE9iamVjdCkge1xyXG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShzZWNvbmRPYmplY3RbY29sdW1uTmFtZV0pKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWZpcnN0T2JqZWN0W2NvbHVtbk5hbWVdKVxyXG4gICAgICAgICAgICAgICAgICAgIGZpcnN0T2JqZWN0W2NvbHVtbk5hbWVdID0gW107XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCByb3cgb2Ygc2Vjb25kT2JqZWN0W2NvbHVtbk5hbWVdKVxyXG4gICAgICAgICAgICAgICAgICAgIGZpcnN0T2JqZWN0W2NvbHVtbk5hbWVdLnB1c2goY2xvbmUocm93KSlcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZmlyc3RPYmplY3RbY29sdW1uTmFtZV0gPT0gXCJvYmplY3RcIiAmJiAhKGZpcnN0T2JqZWN0W2NvbHVtbk5hbWVdIGluc3RhbmNlb2YgUmVnRXhwKSlcclxuICAgICAgICAgICAgICAgIGZpcnN0T2JqZWN0W2NvbHVtbk5hbWVdID0gbWVyZ2UoZmlyc3RPYmplY3RbY29sdW1uTmFtZV0sIHNlY29uZE9iamVjdFtjb2x1bW5OYW1lXSlcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgZmlyc3RPYmplY3RbY29sdW1uTmFtZV0gPSBzZWNvbmRPYmplY3RbY29sdW1uTmFtZV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmaXJzdE9iamVjdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzTWF0Y2hlZChqc29uT2JqZWN0OiB7IFtrZXk6IHN0cmluZ106IGFueSB9LCBjb21wYXJlT2JqZWN0OiB7IFtrZXk6IHN0cmluZ106IGFueSB9KSB7XHJcbiAgICBsZXQgaXNNb2RpZmllZDogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgZm9yICh2YXIgY29sdW1uTmFtZSBpbiBjb21wYXJlT2JqZWN0KSB7XHJcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGpzb25PYmplY3RbY29sdW1uTmFtZV0pKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGpzb25PYmplY3RbY29sdW1uTmFtZV0ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpc01vZGlmaWVkID0gaXNNYXRjaGVkKGpzb25PYmplY3RbY29sdW1uTmFtZV1baV0sIGNvbXBhcmVPYmplY3RbY29sdW1uTmFtZV1baV0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGpzb25PYmplY3RbY29sdW1uTmFtZV0gPT0gXCJvYmplY3RcIiAmJiAhKGpzb25PYmplY3RbY29sdW1uTmFtZV0gaW5zdGFuY2VvZiBSZWdFeHApKVxyXG4gICAgICAgICAgICAgICAgaXNNb2RpZmllZCA9IGlzTWF0Y2hlZChqc29uT2JqZWN0W2NvbHVtbk5hbWVdLCBjb21wYXJlT2JqZWN0W2NvbHVtbk5hbWVdKTtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgaXNNb2RpZmllZCA9ICEoanNvbk9iamVjdFtjb2x1bW5OYW1lXSA9PSBjb21wYXJlT2JqZWN0W2NvbHVtbk5hbWVdKTtcclxuICAgICAgICAgICAgaWYgKGlzTW9kaWZpZWQpXHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgIH1cclxuICAgICAgICByZXR1cm4gaXNNb2RpZmllZDtcclxufVxyXG4iXX0=