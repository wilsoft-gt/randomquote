import { Linq } from './linq';
import { ApplicationUtil } from './app-util';
import { RxFormGroup } from "../services/rx-form-group";
export class FormProvider {
    static ProcessRule(control, config, isDynamicConfig = false) {
        const formGroupValue = ApplicationUtil.getParentObjectValue(control);
        const parentObject = (control.parent) ? ApplicationUtil.cloneValue(control.parent.value) : undefined;
        let modelInstance = undefined;
        if (control.parent && control.parent instanceof RxFormGroup)
            modelInstance = control.parent.modelInstance;
        if (parentObject)
            this.updateFormControlValue(parentObject, control.parent.controls, control);
        else if (config.conditionalExpression)
            return false;
        return Linq.execute(formGroupValue, config, parentObject, modelInstance, isDynamicConfig);
    }
    static updateFormControlValue(parentObject, controls, control) {
        for (var controlName in parentObject) {
            if (!(parentObject[controlName] instanceof Object))
                if (controls[controlName] === control) {
                    parentObject[controlName] = control.value;
                    break;
                }
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1wcm92aWRlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0ByeHdlYi9yZWFjdGl2ZS1mb3JtLXZhbGlkYXRvcnMvIiwic291cmNlcyI6WyJ1dGlsL2Zvcm0tcHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLElBQUksRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUM3QixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBSzdDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQTtBQUV2RCxNQUFNLE9BQU8sWUFBWTtJQUlyQixNQUFNLENBQUMsV0FBVyxDQUFDLE9BQXVCLEVBQUMsTUFBVSxFQUFDLGtCQUEwQixLQUFLO1FBQ2pGLE1BQU0sY0FBYyxHQUFHLGVBQWUsQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNyRSxNQUFNLFlBQVksR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7UUFDckcsSUFBSSxhQUFhLEdBQUcsU0FBUyxDQUFDO1FBQzlCLElBQUksT0FBTyxDQUFDLE1BQU0sSUFBSSxPQUFPLENBQUMsTUFBTSxZQUFZLFdBQVc7WUFDdkQsYUFBYSxHQUFpQixPQUFPLENBQUMsTUFBTyxDQUFDLGFBQWEsQ0FBQztRQUNoRSxJQUFJLFlBQVk7WUFDWixJQUFJLENBQUMsc0JBQXNCLENBQUMsWUFBWSxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO2FBQzNFLElBQUksTUFBTSxDQUFDLHFCQUFxQjtZQUNqQyxPQUFPLEtBQUssQ0FBQztRQUNqQixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUMsYUFBYSxFQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQzVGLENBQUM7SUFFTyxNQUFNLENBQUMsc0JBQXNCLENBQUMsWUFBK0IsRUFBQyxRQUFZLEVBQUMsT0FBdUI7UUFDdEcsS0FBSSxJQUFJLFdBQVcsSUFBSSxZQUFZLEVBQUM7WUFDaEMsSUFBRyxDQUFDLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxZQUFZLE1BQU0sQ0FBQztnQkFDN0MsSUFBRyxRQUFRLENBQUMsV0FBVyxDQUFDLEtBQUssT0FBTyxFQUFDO29CQUNqQyxZQUFZLENBQUMsV0FBVyxDQUFDLEdBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQztvQkFDekMsTUFBTTtpQkFDVDtTQUNSO0lBQ0wsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtMaW5xIH0gZnJvbSAnLi9saW5xJztcclxuaW1wb3J0IHsgQXBwbGljYXRpb25VdGlsIH0gZnJvbSAnLi9hcHAtdXRpbCc7XHJcbmltcG9ydCB7XHJcbiAgICBBYnN0cmFjdENvbnRyb2xcclxufSBmcm9tIFwiQGFuZ3VsYXIvZm9ybXNcIjtcclxuXHJcbmltcG9ydCB7IFJ4Rm9ybUdyb3VwIH0gZnJvbSBcIi4uL3NlcnZpY2VzL3J4LWZvcm0tZ3JvdXBcIlxyXG5cclxuZXhwb3J0IGNsYXNzIEZvcm1Qcm92aWRlcntcclxuXHJcbiAgIFxyXG5cclxuICAgIHN0YXRpYyBQcm9jZXNzUnVsZShjb250cm9sOkFic3RyYWN0Q29udHJvbCxjb25maWc6YW55LGlzRHluYW1pY0NvbmZpZzpib29sZWFuID0gZmFsc2UpIDogYm9vbGVhbiB8IHtba2V5OnN0cmluZ106YW55fSB7XHJcbiAgICAgICAgY29uc3QgZm9ybUdyb3VwVmFsdWUgPSBBcHBsaWNhdGlvblV0aWwuZ2V0UGFyZW50T2JqZWN0VmFsdWUoY29udHJvbCk7XHJcbiAgICAgICAgY29uc3QgcGFyZW50T2JqZWN0ID0gKGNvbnRyb2wucGFyZW50KSA/IEFwcGxpY2F0aW9uVXRpbC5jbG9uZVZhbHVlKGNvbnRyb2wucGFyZW50LnZhbHVlKSA6IHVuZGVmaW5lZDtcclxuICAgICAgICBsZXQgbW9kZWxJbnN0YW5jZSA9IHVuZGVmaW5lZDtcclxuICAgICAgICBpZiAoY29udHJvbC5wYXJlbnQgJiYgY29udHJvbC5wYXJlbnQgaW5zdGFuY2VvZiBSeEZvcm1Hcm91cClcclxuICAgICAgICAgICAgbW9kZWxJbnN0YW5jZSA9ICg8UnhGb3JtR3JvdXA+Y29udHJvbC5wYXJlbnQpLm1vZGVsSW5zdGFuY2U7XHJcbiAgICAgICAgaWYgKHBhcmVudE9iamVjdClcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVGb3JtQ29udHJvbFZhbHVlKHBhcmVudE9iamVjdCwgY29udHJvbC5wYXJlbnQuY29udHJvbHMsIGNvbnRyb2wpO1xyXG4gICAgICAgIGVsc2UgaWYgKGNvbmZpZy5jb25kaXRpb25hbEV4cHJlc3Npb24pXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICByZXR1cm4gTGlucS5leGVjdXRlKGZvcm1Hcm91cFZhbHVlLCBjb25maWcsIHBhcmVudE9iamVjdCxtb2RlbEluc3RhbmNlLGlzRHluYW1pY0NvbmZpZyk7IFxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc3RhdGljIHVwZGF0ZUZvcm1Db250cm9sVmFsdWUocGFyZW50T2JqZWN0Ontba2V5OnN0cmluZ106YW55fSxjb250cm9sczphbnksY29udHJvbDpBYnN0cmFjdENvbnRyb2wpe1xyXG4gICAgICAgIGZvcih2YXIgY29udHJvbE5hbWUgaW4gcGFyZW50T2JqZWN0KXtcclxuICAgICAgICAgICAgaWYoIShwYXJlbnRPYmplY3RbY29udHJvbE5hbWVdIGluc3RhbmNlb2YgT2JqZWN0KSlcclxuICAgICAgICAgICAgICAgIGlmKGNvbnRyb2xzW2NvbnRyb2xOYW1lXSA9PT0gY29udHJvbCl7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50T2JqZWN0W2NvbnRyb2xOYW1lXT0gY29udHJvbC52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19