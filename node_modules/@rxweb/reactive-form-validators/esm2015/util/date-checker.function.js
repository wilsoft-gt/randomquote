import { DateProvider } from "./date-provider";
import { FormProvider } from "./form-provider";
import { RegexValidator } from "./regex-validator";
import { ObjectMaker } from "./object-maker";
import { AnnotationTypes } from "../core/validator.static";
import { OPERATORS } from "../const/operators.const";
import { getConfigObject } from "../util/config-provider";
function runCondition(leftValue, rightValue, operator) {
    let result = false;
    switch (operator) {
        case OPERATORS.lessThan:
        case OPERATORS.greaterThan:
            result = leftValue > rightValue;
            break;
        case OPERATORS.lessThanEqualTo:
        case OPERATORS.greaterThanEqualTo:
            result = leftValue >= rightValue;
            break;
    }
    return result;
}
export function dateChecker(control, config, operationType) {
    config = getConfigObject(config, control);
    var dateProvider = new DateProvider();
    if (FormProvider.ProcessRule(control, config)) {
        if (RegexValidator.isNotBlank(control.value)) {
            if (dateProvider.isDate(control.value) || dateProvider.isValid(control.value)) {
                let checkDate = dateProvider.getCompareDate(config, control);
                let currentControlValue = dateProvider.getDate(control.value);
                let isValid = operationType == AnnotationTypes.minDate ? runCondition(currentControlValue, checkDate, config.operator || OPERATORS.greaterThanEqualTo) : runCondition(checkDate, currentControlValue, config.operator || OPERATORS.lessThanEqualTo);
                if (!isValid)
                    return ObjectMaker.toJson(operationType, config, [control.value]);
            }
            else
                return ObjectMaker.toJson(operationType, config, [control.value]);
        }
    }
    return ObjectMaker.null();
}
export function validateDate(control, config, operationType) {
    config = getConfigObject(config, control);
    var dateProvider = new DateProvider();
    if (FormProvider.ProcessRule(control, config)) {
        if (RegexValidator.isNotBlank(control.value)) {
            if (!dateProvider.isDate(control.value) && !dateProvider.isValid(control.value)) {
                return ObjectMaker.toJson(operationType, config, [control.value]);
            }
        }
    }
    return ObjectMaker.null();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1jaGVja2VyLmZ1bmN0aW9uLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHJ4d2ViL3JlYWN0aXZlLWZvcm0tdmFsaWRhdG9ycy8iLCJzb3VyY2VzIjpbInV0aWwvZGF0ZS1jaGVja2VyLmZ1bmN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDM0QsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLDBCQUEwQixDQUFBO0FBQ2xELE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUN4RCxTQUFTLFlBQVksQ0FBQyxTQUFjLEVBQUMsVUFBZSxFQUFDLFFBQWU7SUFDaEUsSUFBSSxNQUFNLEdBQVksS0FBSyxDQUFDO0lBQzVCLFFBQU8sUUFBUSxFQUFDO1FBQ1osS0FBSyxTQUFTLENBQUMsUUFBUSxDQUFDO1FBQ3hCLEtBQUssU0FBUyxDQUFDLFdBQVc7WUFDekIsTUFBTSxHQUFHLFNBQVMsR0FBRyxVQUFVLENBQUM7WUFDakMsTUFBTTtRQUNOLEtBQUssU0FBUyxDQUFDLGVBQWUsQ0FBQztRQUMvQixLQUFLLFNBQVMsQ0FBQyxrQkFBa0I7WUFDaEMsTUFBTSxHQUFHLFNBQVMsSUFBSSxVQUFVLENBQUM7WUFDbEMsTUFBTTtLQUNUO0lBQ0QsT0FBTyxNQUFNLENBQUM7QUFDbEIsQ0FBQztBQUVELE1BQU0sVUFBVSxXQUFXLENBQUMsT0FBd0IsRUFBQyxNQUFVLEVBQUMsYUFBb0I7SUFDaEYsTUFBTSxHQUFHLGVBQWUsQ0FBQyxNQUFNLEVBQUMsT0FBTyxDQUFDLENBQUM7SUFDekMsSUFBSSxZQUFZLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQUNwQyxJQUFJLFlBQVksQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQzVDLElBQUksY0FBYyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDMUMsSUFBSSxZQUFZLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxZQUFZLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDM0UsSUFBSSxTQUFTLEdBQUcsWUFBWSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUMsT0FBTyxDQUFDLENBQUM7Z0JBQzVELElBQUksbUJBQW1CLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQzlELElBQUksT0FBTyxHQUFHLGFBQWEsSUFBSSxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsbUJBQW1CLEVBQUMsU0FBUyxFQUFDLE1BQU0sQ0FBQyxRQUFRLElBQUksU0FBUyxDQUFDLGtCQUFrQixDQUFDLENBQUEsQ0FBQyxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUMsbUJBQW1CLEVBQUMsTUFBTSxDQUFDLFFBQVEsSUFBSSxTQUFTLENBQUMsZUFBZSxDQUFDLENBQUE7Z0JBQzlPLElBQUksQ0FBQyxPQUFPO29CQUNSLE9BQU8sV0FBVyxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsTUFBTSxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUE7YUFDeEU7O2dCQUNHLE9BQU8sV0FBVyxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsTUFBTSxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUE7U0FDeEU7S0FDSjtJQUNELE9BQU8sV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQzlCLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLE9BQXdCLEVBQUMsTUFBVSxFQUFDLGFBQW9CO0lBQ2pGLE1BQU0sR0FBRyxlQUFlLENBQUMsTUFBTSxFQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3pDLElBQUksWUFBWSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7SUFDcEMsSUFBSSxZQUFZLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBQyxNQUFNLENBQUMsRUFBRTtRQUM1QyxJQUFJLGNBQWMsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQzFDLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUM3RSxPQUFPLFdBQVcsQ0FBQyxNQUFNLENBQUMsYUFBYSxFQUFFLE1BQU0sRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFBO2FBQ3hFO1NBQ0o7S0FDSjtJQUNHLE9BQU8sV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQzlCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBYnN0cmFjdENvbnRyb2wgfSBmcm9tIFwiQGFuZ3VsYXIvZm9ybXNcIjtcclxuaW1wb3J0IHsgRGF0ZVByb3ZpZGVyIH0gZnJvbSBcIi4vZGF0ZS1wcm92aWRlclwiO1xyXG5pbXBvcnQgeyBGb3JtUHJvdmlkZXIgfSBmcm9tIFwiLi9mb3JtLXByb3ZpZGVyXCI7XHJcbmltcG9ydCB7IFJlZ2V4VmFsaWRhdG9yIH0gZnJvbSBcIi4vcmVnZXgtdmFsaWRhdG9yXCI7XHJcbmltcG9ydCB7IE9iamVjdE1ha2VyIH0gZnJvbSBcIi4vb2JqZWN0LW1ha2VyXCI7XHJcbmltcG9ydCB7IEFubm90YXRpb25UeXBlcyB9IGZyb20gXCIuLi9jb3JlL3ZhbGlkYXRvci5zdGF0aWNcIjtcclxuaW1wb3J0IHtPUEVSQVRPUlN9IGZyb20gXCIuLi9jb25zdC9vcGVyYXRvcnMuY29uc3RcIlxyXG5pbXBvcnQge2dldENvbmZpZ09iamVjdH0gZnJvbSBcIi4uL3V0aWwvY29uZmlnLXByb3ZpZGVyXCI7XHJcbmZ1bmN0aW9uIHJ1bkNvbmRpdGlvbihsZWZ0VmFsdWU6RGF0ZSxyaWdodFZhbHVlOkRhdGUsb3BlcmF0b3I6c3RyaW5nKTpib29sZWFue1xyXG4gICAgbGV0IHJlc3VsdDpib29sZWFuICA9IGZhbHNlO1xyXG4gICAgc3dpdGNoKG9wZXJhdG9yKXtcclxuICAgICAgICBjYXNlIE9QRVJBVE9SUy5sZXNzVGhhbjpcclxuICAgICAgICBjYXNlIE9QRVJBVE9SUy5ncmVhdGVyVGhhbjpcclxuICAgICAgICAgcmVzdWx0ID0gbGVmdFZhbHVlID4gcmlnaHRWYWx1ZTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIE9QRVJBVE9SUy5sZXNzVGhhbkVxdWFsVG86XHJcbiAgICAgICAgY2FzZSBPUEVSQVRPUlMuZ3JlYXRlclRoYW5FcXVhbFRvOlxyXG4gICAgICAgICByZXN1bHQgPSBsZWZ0VmFsdWUgPj0gcmlnaHRWYWx1ZTtcclxuICAgICAgICBicmVhaztcclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkYXRlQ2hlY2tlcihjb250cm9sOiBBYnN0cmFjdENvbnRyb2wsY29uZmlnOmFueSxvcGVyYXRpb25UeXBlOnN0cmluZyk6IHsgW2tleTogc3RyaW5nXTogYW55IH0ge1xyXG4gICAgY29uZmlnID0gZ2V0Q29uZmlnT2JqZWN0KGNvbmZpZyxjb250cm9sKTtcclxuICAgIHZhciBkYXRlUHJvdmlkZXIgPSBuZXcgRGF0ZVByb3ZpZGVyKCk7XHJcbiAgICAgIGlmIChGb3JtUHJvdmlkZXIuUHJvY2Vzc1J1bGUoY29udHJvbCxjb25maWcpKSB7XHJcbiAgICAgICAgaWYgKFJlZ2V4VmFsaWRhdG9yLmlzTm90QmxhbmsoY29udHJvbC52YWx1ZSkpIHtcclxuICAgICAgICAgICAgaWYgKGRhdGVQcm92aWRlci5pc0RhdGUoY29udHJvbC52YWx1ZSkgfHwgZGF0ZVByb3ZpZGVyLmlzVmFsaWQoY29udHJvbC52YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgIGxldCBjaGVja0RhdGUgPSBkYXRlUHJvdmlkZXIuZ2V0Q29tcGFyZURhdGUoY29uZmlnLGNvbnRyb2wpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGN1cnJlbnRDb250cm9sVmFsdWUgPSBkYXRlUHJvdmlkZXIuZ2V0RGF0ZShjb250cm9sLnZhbHVlKTtcclxuICAgICAgICAgICAgICAgIGxldCBpc1ZhbGlkID0gb3BlcmF0aW9uVHlwZSA9PSBBbm5vdGF0aW9uVHlwZXMubWluRGF0ZSA/IHJ1bkNvbmRpdGlvbihjdXJyZW50Q29udHJvbFZhbHVlLGNoZWNrRGF0ZSxjb25maWcub3BlcmF0b3IgfHwgT1BFUkFUT1JTLmdyZWF0ZXJUaGFuRXF1YWxUbyk6IHJ1bkNvbmRpdGlvbihjaGVja0RhdGUsY3VycmVudENvbnRyb2xWYWx1ZSxjb25maWcub3BlcmF0b3IgfHwgT1BFUkFUT1JTLmxlc3NUaGFuRXF1YWxUbylcclxuICAgICAgICAgICAgICAgIGlmICghaXNWYWxpZClcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0TWFrZXIudG9Kc29uKG9wZXJhdGlvblR5cGUsIGNvbmZpZywgW2NvbnRyb2wudmFsdWVdKVxyXG4gICAgICAgICAgICB9IGVsc2VcclxuICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3RNYWtlci50b0pzb24ob3BlcmF0aW9uVHlwZSwgY29uZmlnLCBbY29udHJvbC52YWx1ZV0pXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIE9iamVjdE1ha2VyLm51bGwoKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlRGF0ZShjb250cm9sOiBBYnN0cmFjdENvbnRyb2wsY29uZmlnOmFueSxvcGVyYXRpb25UeXBlOnN0cmluZyk6IHsgW2tleTogc3RyaW5nXTogYW55IH0ge1xyXG4gICAgY29uZmlnID0gZ2V0Q29uZmlnT2JqZWN0KGNvbmZpZyxjb250cm9sKTtcclxuICAgIHZhciBkYXRlUHJvdmlkZXIgPSBuZXcgRGF0ZVByb3ZpZGVyKCk7XHJcbiAgICAgIGlmIChGb3JtUHJvdmlkZXIuUHJvY2Vzc1J1bGUoY29udHJvbCxjb25maWcpKSB7XHJcbiAgICAgICAgaWYgKFJlZ2V4VmFsaWRhdG9yLmlzTm90QmxhbmsoY29udHJvbC52YWx1ZSkpIHtcclxuICAgICAgICAgICAgaWYgKCFkYXRlUHJvdmlkZXIuaXNEYXRlKGNvbnRyb2wudmFsdWUpICYmICFkYXRlUHJvdmlkZXIuaXNWYWxpZChjb250cm9sLnZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdE1ha2VyLnRvSnNvbihvcGVyYXRpb25UeXBlLCBjb25maWcsIFtjb250cm9sLnZhbHVlXSlcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuICAgIHJldHVybiBPYmplY3RNYWtlci5udWxsKCk7XHJcbn0iXX0=