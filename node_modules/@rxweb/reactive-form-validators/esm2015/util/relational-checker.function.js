import { ApplicationUtil } from "./app-util";
import { FormProvider } from "./form-provider";
import { RegexValidator } from "./regex-validator";
import { AnnotationTypes } from "../core/validator.static";
import { ObjectMaker } from "./object-maker";
import { getConfigObject } from "../util/config-provider";
export function relationalCheck(control, config, relationalOperatorName) {
    config = getConfigObject(config, control);
    const matchControl = config.fieldName ? ApplicationUtil.getFormControl(config.fieldName, control) : undefined;
    const matchControlValue = (matchControl) ? matchControl.value : config.value !== undefined ? config.value : '';
    if (FormProvider.ProcessRule(control, config)) {
        if (RegexValidator.isNotBlank(control.value) && RegexValidator.isNotBlank(matchControlValue)) {
            let isValid = false;
            switch (relationalOperatorName) {
                case AnnotationTypes.greaterThan:
                    isValid = parseFloat(control.value) > parseFloat(matchControlValue);
                    break;
                case AnnotationTypes.lessThan:
                    isValid = parseFloat(control.value) < parseFloat(matchControlValue);
                    break;
                case AnnotationTypes.greaterThanEqualTo:
                    isValid = parseFloat(control.value) >= parseFloat(matchControlValue);
                    break;
                case AnnotationTypes.lessThanEqualTo:
                    isValid = parseFloat(control.value) <= parseFloat(matchControlValue);
                    break;
            }
            if (!isValid)
                return ObjectMaker.toJson(relationalOperatorName, config, [control.value, matchControlValue]);
        }
    }
    return ObjectMaker.null();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVsYXRpb25hbC1jaGVja2VyLmZ1bmN0aW9uLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHJ4d2ViL3JlYWN0aXZlLWZvcm0tdmFsaWRhdG9ycy8iLCJzb3VyY2VzIjpbInV0aWwvcmVsYXRpb25hbC1jaGVja2VyLmZ1bmN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDN0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDM0QsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUN4RCxNQUFNLFVBQVUsZUFBZSxDQUFDLE9BQXVCLEVBQUMsTUFBVSxFQUFDLHNCQUE2QjtJQUM1RixNQUFNLEdBQUcsZUFBZSxDQUFDLE1BQU0sRUFBQyxPQUFPLENBQUMsQ0FBQztJQUN6QyxNQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztJQUM3RyxNQUFNLGlCQUFpQixHQUFHLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQSxFQUFFLENBQUM7SUFDOUcsSUFBSSxZQUFZLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBQyxNQUFNLENBQUMsRUFBRTtRQUMxQyxJQUFJLGNBQWMsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLGNBQWMsQ0FBQyxVQUFVLENBQUMsaUJBQWlCLENBQUMsRUFBRTtZQUMxRixJQUFJLE9BQU8sR0FBRyxLQUFLLENBQUM7WUFDcEIsUUFBTyxzQkFBc0IsRUFBQztnQkFDMUIsS0FBSyxlQUFlLENBQUMsV0FBVztvQkFDaEMsT0FBTyxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsVUFBVSxDQUFDLGlCQUFpQixDQUFDLENBQUM7b0JBQ3BFLE1BQU07Z0JBQ04sS0FBSyxlQUFlLENBQUMsUUFBUTtvQkFDN0IsT0FBTyxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsVUFBVSxDQUFDLGlCQUFpQixDQUFDLENBQUE7b0JBQ25FLE1BQU07Z0JBQ04sS0FBSyxlQUFlLENBQUMsa0JBQWtCO29CQUN2QyxPQUFPLEdBQUcsVUFBVSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxVQUFVLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtvQkFDcEUsTUFBTTtnQkFDTixLQUFLLGVBQWUsQ0FBQyxlQUFlO29CQUNwQyxPQUFPLEdBQUcsVUFBVSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxVQUFVLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtvQkFDcEUsTUFBTTthQUNUO1lBQ0QsSUFBRyxDQUFDLE9BQU87Z0JBQ1AsT0FBTyxXQUFXLENBQUMsTUFBTSxDQUFDLHNCQUFzQixFQUFFLE1BQU0sRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsaUJBQWlCLENBQUMsQ0FBQyxDQUFDO1NBQ3JHO0tBQ0o7SUFDRCxPQUFPLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUM5QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWJzdHJhY3RDb250cm9sIH0gZnJvbSBcIkBhbmd1bGFyL2Zvcm1zXCI7XHJcbmltcG9ydCB7IEFwcGxpY2F0aW9uVXRpbCB9IGZyb20gXCIuL2FwcC11dGlsXCI7XHJcbmltcG9ydCB7IEZvcm1Qcm92aWRlciB9IGZyb20gXCIuL2Zvcm0tcHJvdmlkZXJcIjtcclxuaW1wb3J0IHsgUmVnZXhWYWxpZGF0b3IgfSBmcm9tIFwiLi9yZWdleC12YWxpZGF0b3JcIjtcclxuaW1wb3J0IHsgQW5ub3RhdGlvblR5cGVzIH0gZnJvbSBcIi4uL2NvcmUvdmFsaWRhdG9yLnN0YXRpY1wiO1xyXG5pbXBvcnQgeyBPYmplY3RNYWtlciB9IGZyb20gXCIuL29iamVjdC1tYWtlclwiO1xyXG5pbXBvcnQge2dldENvbmZpZ09iamVjdH0gZnJvbSBcIi4uL3V0aWwvY29uZmlnLXByb3ZpZGVyXCI7XHJcbmV4cG9ydCBmdW5jdGlvbiByZWxhdGlvbmFsQ2hlY2soY29udHJvbDpBYnN0cmFjdENvbnRyb2wsY29uZmlnOmFueSxyZWxhdGlvbmFsT3BlcmF0b3JOYW1lOnN0cmluZyl7XHJcbiAgICBjb25maWcgPSBnZXRDb25maWdPYmplY3QoY29uZmlnLGNvbnRyb2wpO1xyXG4gICAgY29uc3QgbWF0Y2hDb250cm9sID0gY29uZmlnLmZpZWxkTmFtZSA/IEFwcGxpY2F0aW9uVXRpbC5nZXRGb3JtQ29udHJvbChjb25maWcuZmllbGROYW1lLGNvbnRyb2wpIDogdW5kZWZpbmVkO1xyXG4gICAgY29uc3QgbWF0Y2hDb250cm9sVmFsdWUgPSAobWF0Y2hDb250cm9sKSA/IG1hdGNoQ29udHJvbC52YWx1ZSA6IGNvbmZpZy52YWx1ZSAhPT0gdW5kZWZpbmVkID8gY29uZmlnLnZhbHVlIDonJztcclxuICAgIGlmIChGb3JtUHJvdmlkZXIuUHJvY2Vzc1J1bGUoY29udHJvbCxjb25maWcpKSB7XHJcbiAgICAgICAgaWYgKFJlZ2V4VmFsaWRhdG9yLmlzTm90QmxhbmsoY29udHJvbC52YWx1ZSkgJiYgUmVnZXhWYWxpZGF0b3IuaXNOb3RCbGFuayhtYXRjaENvbnRyb2xWYWx1ZSkpIHtcclxuICAgICAgICAgICAgbGV0IGlzVmFsaWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgc3dpdGNoKHJlbGF0aW9uYWxPcGVyYXRvck5hbWUpe1xyXG4gICAgICAgICAgICAgICAgY2FzZSBBbm5vdGF0aW9uVHlwZXMuZ3JlYXRlclRoYW46XHJcbiAgICAgICAgICAgICAgICBpc1ZhbGlkID0gcGFyc2VGbG9hdChjb250cm9sLnZhbHVlKSA+IHBhcnNlRmxvYXQobWF0Y2hDb250cm9sVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEFubm90YXRpb25UeXBlcy5sZXNzVGhhbjpcclxuICAgICAgICAgICAgICAgIGlzVmFsaWQgPSBwYXJzZUZsb2F0KGNvbnRyb2wudmFsdWUpIDwgcGFyc2VGbG9hdChtYXRjaENvbnRyb2xWYWx1ZSlcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBBbm5vdGF0aW9uVHlwZXMuZ3JlYXRlclRoYW5FcXVhbFRvOlxyXG4gICAgICAgICAgICAgICAgaXNWYWxpZCA9IHBhcnNlRmxvYXQoY29udHJvbC52YWx1ZSkgPj0gcGFyc2VGbG9hdChtYXRjaENvbnRyb2xWYWx1ZSlcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBBbm5vdGF0aW9uVHlwZXMubGVzc1RoYW5FcXVhbFRvOlxyXG4gICAgICAgICAgICAgICAgaXNWYWxpZCA9IHBhcnNlRmxvYXQoY29udHJvbC52YWx1ZSkgPD0gcGFyc2VGbG9hdChtYXRjaENvbnRyb2xWYWx1ZSlcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKCFpc1ZhbGlkKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdE1ha2VyLnRvSnNvbihyZWxhdGlvbmFsT3BlcmF0b3JOYW1lLCBjb25maWcsIFtjb250cm9sLnZhbHVlLCBtYXRjaENvbnRyb2xWYWx1ZV0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBPYmplY3RNYWtlci5udWxsKCk7XHJcbn0iXX0=