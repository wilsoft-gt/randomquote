import * as tslib_1 from "tslib";
import { Input, Directive, forwardRef, ElementRef } from '@angular/core';
import { NG_ASYNC_VALIDATORS } from '@angular/forms';
import { APP_VALIDATORS } from "../../const/app-validators.const";
var VALIDATOR_CONFIG = "validatorConfig";
var ImageFileControlDirective = /** @class */ (function () {
    function ImageFileControlDirective(elementRef) {
        this.elementRef = elementRef;
        this.isProcessed = false;
        this.element = elementRef.nativeElement;
    }
    ImageFileControlDirective_1 = ImageFileControlDirective;
    Object.defineProperty(ImageFileControlDirective.prototype, "image", {
        set: function (config) {
            this.imageValidation = APP_VALIDATORS.image(config);
        },
        enumerable: true,
        configurable: true
    });
    ImageFileControlDirective.prototype.setConfig = function (control) {
        var image = "image";
        if (!this[image] && control[VALIDATOR_CONFIG] && control[VALIDATOR_CONFIG][image])
            this[image] = control[VALIDATOR_CONFIG][image];
        this.isProcessed = true;
    };
    ImageFileControlDirective.prototype.validate = function (control) {
        if (!this.isProcessed)
            this.setConfig(control);
        if (this.imageValidation) {
            return this.imageValidation(control, this.element.files);
        }
        return new Promise(function (resolve, reject) { resolve(null); });
    };
    var ImageFileControlDirective_1;
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], ImageFileControlDirective.prototype, "image", null);
    ImageFileControlDirective = ImageFileControlDirective_1 = tslib_1.__decorate([
        Directive({
            selector: "input[type=file]",
            providers: [{
                    provide: NG_ASYNC_VALIDATORS,
                    useExisting: forwardRef(function () { return ImageFileControlDirective_1; }),
                    multi: true
                }]
        }),
        tslib_1.__metadata("design:paramtypes", [ElementRef])
    ], ImageFileControlDirective);
    return ImageFileControlDirective;
}());
export { ImageFileControlDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2UtZmlsZS1jb250cm9sLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0ByeHdlYi9yZWFjdGl2ZS1mb3JtLXZhbGlkYXRvcnMvIiwic291cmNlcyI6WyJkaXJlY3RpdmVzL3RlbXBsYXRlLXZhbGlkYXRpb25zL2ltYWdlLWZpbGUtY29udHJvbC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxLQUFLLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDdEUsT0FBTyxFQUFvQyxtQkFBbUIsRUFBaUIsTUFBTSxnQkFBZ0IsQ0FBQztBQUV0RyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDbEUsSUFBTSxnQkFBZ0IsR0FBRyxpQkFBaUIsQ0FBQztBQVMzQztJQVVJLG1DQUFvQixVQUFzQjtRQUF0QixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBUjFDLGdCQUFXLEdBQVcsS0FBSyxDQUFDO1FBU3hCLElBQUksQ0FBQyxPQUFPLEdBQUcsVUFBVSxDQUFDLGFBQXFCLENBQUM7SUFDcEQsQ0FBQztrQ0FaUSx5QkFBeUI7SUFNekIsc0JBQUksNENBQUs7YUFBVCxVQUFVLE1BQWtCO1lBQ25DLElBQUksQ0FBQyxlQUFlLEdBQUcsY0FBYyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN0RCxDQUFDOzs7T0FBQTtJQU1ELDZDQUFTLEdBQVQsVUFBVSxPQUF1QjtRQUM3QixJQUFJLEtBQUssR0FBRyxPQUFPLENBQUM7UUFDcEIsSUFBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxPQUFPLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxLQUFLLENBQUM7WUFDOUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ25ELElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO0lBQzFCLENBQUM7SUFFRCw0Q0FBUSxHQUFSLFVBQVMsT0FBd0I7UUFDL0IsSUFBRyxDQUFDLElBQUksQ0FBQyxXQUFXO1lBQ2xCLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDMUIsSUFBRyxJQUFJLENBQUMsZUFBZSxFQUFDO1lBQ3BCLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLEVBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUMzRDtRQUNELE9BQU8sSUFBSSxPQUFPLENBQUMsVUFBQyxPQUFPLEVBQUUsTUFBTSxJQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQzdELENBQUM7O0lBdEJRO1FBQVIsS0FBSyxFQUFFOzs7MERBRVA7SUFSUSx5QkFBeUI7UUFSckMsU0FBUyxDQUFDO1lBQ1AsUUFBUSxFQUFFLGtCQUFrQjtZQUM1QixTQUFTLEVBQUUsQ0FBQztvQkFDUixPQUFPLEVBQUUsbUJBQW1CO29CQUM1QixXQUFXLEVBQUUsVUFBVSxDQUFDLGNBQU0sT0FBQSwyQkFBeUIsRUFBekIsQ0FBeUIsQ0FBQztvQkFDeEQsS0FBSyxFQUFFLElBQUk7aUJBQ2QsQ0FBQztTQUNMLENBQUM7aURBV2tDLFVBQVU7T0FWakMseUJBQXlCLENBNkJyQztJQUFELGdDQUFDO0NBQUEsQUE3QkQsSUE2QkM7U0E3QlkseUJBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbnB1dCwgRGlyZWN0aXZlICxmb3J3YXJkUmVmLEVsZW1lbnRSZWZ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge1ZhbGlkYXRpb25FcnJvcnMsIEFic3RyYWN0Q29udHJvbCwgTkdfQVNZTkNfVkFMSURBVE9SUyxBc3luY1ZhbGlkYXRvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuaW1wb3J0IHtJbWFnZUNvbmZpZ30gZnJvbSAnLi4vLi4vbW9kZWxzL2NvbmZpZydcclxuaW1wb3J0IHsgQVBQX1ZBTElEQVRPUlMgfSBmcm9tIFwiLi4vLi4vY29uc3QvYXBwLXZhbGlkYXRvcnMuY29uc3RcIjtcclxuY29uc3QgVkFMSURBVE9SX0NPTkZJRyA9IFwidmFsaWRhdG9yQ29uZmlnXCI7XHJcbkBEaXJlY3RpdmUoe1xyXG4gICAgc2VsZWN0b3I6IFwiaW5wdXRbdHlwZT1maWxlXVwiLFxyXG4gICAgcHJvdmlkZXJzOiBbe1xyXG4gICAgICAgIHByb3ZpZGU6IE5HX0FTWU5DX1ZBTElEQVRPUlMsXHJcbiAgICAgICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gSW1hZ2VGaWxlQ29udHJvbERpcmVjdGl2ZSksXHJcbiAgICAgICAgbXVsdGk6IHRydWVcclxuICAgIH1dXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJbWFnZUZpbGVDb250cm9sRGlyZWN0aXZlIGltcGxlbWVudHMgQXN5bmNWYWxpZGF0b3IgIHtcclxuICAgIGVsZW1lbnQ6YW55XHJcbiAgICBpc1Byb2Nlc3NlZDpib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgcHJpdmF0ZSBpbWFnZVZhbGlkYXRpb246RnVuY3Rpb247XHJcblxyXG4gICAgQElucHV0KCkgc2V0IGltYWdlKGNvbmZpZzpJbWFnZUNvbmZpZyl7XHJcbiAgICAgIHRoaXMuaW1hZ2VWYWxpZGF0aW9uID0gQVBQX1ZBTElEQVRPUlMuaW1hZ2UoY29uZmlnKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpe1xyXG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCBhcyBOb2RlO1xyXG4gICAgfVxyXG5cclxuICAgIHNldENvbmZpZyhjb250cm9sOkFic3RyYWN0Q29udHJvbCl7XHJcbiAgICAgICAgbGV0IGltYWdlID0gXCJpbWFnZVwiO1xyXG4gICAgICAgIGlmKCF0aGlzW2ltYWdlXSAmJiBjb250cm9sW1ZBTElEQVRPUl9DT05GSUddICYmIGNvbnRyb2xbVkFMSURBVE9SX0NPTkZJR11baW1hZ2VdKVxyXG4gICAgICAgICAgdGhpc1tpbWFnZV0gPSBjb250cm9sW1ZBTElEQVRPUl9DT05GSUddW2ltYWdlXTtcclxuICAgICAgdGhpcy5pc1Byb2Nlc3NlZCA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgdmFsaWRhdGUoY29udHJvbDogQWJzdHJhY3RDb250cm9sKTogUHJvbWlzZTxWYWxpZGF0aW9uRXJyb3JzIHwgbnVsbD4ge1xyXG4gICAgICBpZighdGhpcy5pc1Byb2Nlc3NlZClcclxuICAgICAgICB0aGlzLnNldENvbmZpZyhjb250cm9sKTtcclxuICAgICAgaWYodGhpcy5pbWFnZVZhbGlkYXRpb24pe1xyXG4gICAgICAgICAgcmV0dXJuIHRoaXMuaW1hZ2VWYWxpZGF0aW9uKGNvbnRyb2wsdGhpcy5lbGVtZW50LmZpbGVzKTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4geyByZXNvbHZlKG51bGwpOyB9KVxyXG4gICAgfSAgICBcclxufVxyXG4iXX0=