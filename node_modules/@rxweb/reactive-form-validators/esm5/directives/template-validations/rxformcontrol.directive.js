import * as tslib_1 from "tslib";
import { Directive, Input, ElementRef, forwardRef, Renderer2 } from '@angular/core';
import { NG_VALIDATORS } from '@angular/forms';
import { APP_VALIDATORS } from '../../const/app-validators.const';
import { BaseValidator } from './base-validator.directive';
import { ELEMENT_VALUE, BLUR, FOCUS, BLANK } from "../../const";
import { TEMPLATE_VALIDATION_CONFIG, CONDITIONAL_VALIDATOR, VALIDATOR_CONFIG } from '../../const/app.const';
import { ApplicationUtil } from '../../util/app-util';
import { DecimalProvider } from "../../domain/element-processor/decimal.provider";
import { RegexValidator } from '../../util';
import { MaskProvider } from '../../domain/element-processor/mask.provider';
var NGMODEL_BINDING = {
    provide: NG_VALIDATORS,
    useExisting: forwardRef(function () { return RxFormControlDirective; }),
    multi: true
};
var ALLOW_VALIDATOR_WITHOUT_CONFIG = ['required', 'notEmpty', 'alpha', 'alphaNumeric', 'ascii', 'dataUri', 'digit', 'email', 'even', 'hexColor', 'json', 'latitude', 'latLong', 'leapYear', 'longitude', 'lowerCase', 'mac', 'odd', 'port', 'primeNumber', 'time', 'upperCase', 'url', 'unique', 'cusip', 'gird'];
var NUMERIC = "numeric";
var IS_FORMAT = "isFormat";
var DIGITS_INFO = "digitsInfo";
var RxFormControlDirective = /** @class */ (function (_super) {
    tslib_1.__extends(RxFormControlDirective, _super);
    function RxFormControlDirective(elementRef, renderer, decimalProvider) {
        var _this = _super.call(this) || this;
        _this.elementRef = elementRef;
        _this.renderer = renderer;
        _this.decimalProvider = decimalProvider;
        _this.eventListeners = [];
        _this.isNumericSubscribed = false;
        _this.isFocusCalled = false;
        _this.isMasked = false;
        _this.element = elementRef.nativeElement;
        _this.setEventName();
        return _this;
    }
    Object.defineProperty(RxFormControlDirective.prototype, "validationControls", {
        get: function () {
            return this.controls;
        },
        set: function (value) {
            this.controls = value;
        },
        enumerable: true,
        configurable: true
    });
    RxFormControlDirective.prototype.ngOnInit = function () {
        var _this = this;
        var validators = [];
        Object.keys(APP_VALIDATORS).forEach(function (validatorName) {
            if ((_this[validatorName]) || (ALLOW_VALIDATOR_WITHOUT_CONFIG.indexOf(validatorName) != -1 && _this[validatorName] == BLANK)) {
                validators.push(APP_VALIDATORS[validatorName](_this[validatorName]));
                if (_this.name && !(_this.formControlName && _this.formControl)) {
                    ApplicationUtil.configureControl(_this.controlConfig, _this[validatorName], validatorName);
                }
            }
        });
        if (validators.length > 0)
            this.validators = validators;
        if (this.numeric && (this.numeric.isFormat || this.numeric.digitsInfo)) {
            this.bindNumericElementEvent();
        }
    };
    RxFormControlDirective.prototype.blurEvent = function () {
        if (!(this.formControl && this.formControl.errors && this.formControl.errors.numeric)) {
            var value = this.decimalProvider.transFormDecimal(this.formControl.value, this.numeric.digitsInfo);
            value = (!this.numeric.isFormat) ? this.decimalProvider.replacer(value) : value;
            this.setValueOnElement(value);
            this.isFocusCalled = false;
        }
    };
    RxFormControlDirective.prototype.bindNumericElementEvent = function (config) {
        var _this = this;
        if (config)
            this.numeric = config;
        var listener = this.renderer.listen(this.element, BLUR, this.blurEvent.bind(this));
        this.eventListeners.push(listener);
        listener = this.renderer.listen(this.element, FOCUS, function (event) {
            _this.isFocusCalled = true;
            if (!(_this.formControl && _this.formControl.errors && _this.formControl.errors.numeric) && _this.formControl.value != null) {
                var value = _this.decimalProvider.replacer(_this.element.value);
                _this.setValueOnElement(value);
            }
        });
        this.eventListeners.push(listener);
    };
    RxFormControlDirective.prototype.bindValueChangeEvent = function () {
        var _this = this;
        if (this.eventName != BLANK) {
            var listener = this.renderer.listen(this.element, this.eventName, function () {
                Object.keys(_this.validationControls).forEach(function (fieldName) {
                    _this.validationControls[fieldName].updateValueAndValidity();
                });
            });
            this.eventListeners.push(listener);
        }
    };
    RxFormControlDirective.prototype.subscribeNumericFormatter = function () {
        if (this.formControl[VALIDATOR_CONFIG] && this.formControl[VALIDATOR_CONFIG][NUMERIC] && (this.formControl[VALIDATOR_CONFIG][NUMERIC][IS_FORMAT] || this.formControl[VALIDATOR_CONFIG][NUMERIC][DIGITS_INFO])) {
            if (!this.isNumericSubscribed) {
                this.bindNumericElementEvent(this.formControl[VALIDATOR_CONFIG][NUMERIC]);
                this.isNumericSubscribed = true;
            }
            if (!this.isFocusCalled && RegexValidator.isNotBlank(this.formControl.value)) {
                this.blurEvent();
            }
        }
    };
    RxFormControlDirective.prototype.subscribeMaskValidator = function () {
        if (this.formControl[VALIDATOR_CONFIG] && this.formControl[VALIDATOR_CONFIG]["mask"] && !this.isMasked) {
            var config = this.formControl[VALIDATOR_CONFIG]["mask"];
            this.maskProvider = new MaskProvider(this.element, config.mask, this.renderer, this.formControl, config);
            this.isMasked = true;
        }
    };
    RxFormControlDirective.prototype.setValueOnElement = function (value) {
        this.renderer.setProperty(this.element, ELEMENT_VALUE, value);
    };
    RxFormControlDirective.prototype.setTemplateValidators = function (control) {
        for (var validatorName in control[VALIDATOR_CONFIG]) {
            this[validatorName] = control[VALIDATOR_CONFIG][validatorName];
        }
        delete control[TEMPLATE_VALIDATION_CONFIG];
        delete control[VALIDATOR_CONFIG];
        this.ngOnInit();
    };
    RxFormControlDirective.prototype.updateOnElementClass = function (element) {
        var previousClassName = '';
        return function (className) {
            if (previousClassName)
                element.classList.remove(previousClassName);
            if (className)
                element.classList.add(className);
            previousClassName = className;
        };
    };
    RxFormControlDirective.prototype.setValidatorConfig = function (control) {
        if (!this.formControl) {
            this.formControl = control;
            var rxFormControl = this.formControl;
            if (rxFormControl.updateOnElementClass)
                rxFormControl.updateOnElementClass = this.updateOnElementClass(this.element);
        }
        this.subscribeMaskValidator();
        this.subscribeNumericFormatter();
        if (control[TEMPLATE_VALIDATION_CONFIG])
            this.setTemplateValidators(control);
        if (control[CONDITIONAL_VALIDATOR]) {
            this.conditionalValidator = control[CONDITIONAL_VALIDATOR];
            delete control[CONDITIONAL_VALIDATOR];
        }
    };
    RxFormControlDirective.prototype.validate = function (control) {
        this.setValidatorConfig(control);
        if (this.conditionalValidator)
            this.conditionalValidator(control);
        if (!this.isProcessed)
            this.setModelConfig(control);
        return ((this.validators && this.validators.length > 0) || this.maskProvider) ? this.validation(control) : null;
    };
    RxFormControlDirective.prototype.ngOnDestroy = function () {
        this.controls = undefined;
        var eventCount = this.eventListeners.length;
        for (var i = 0; i < eventCount; i++) {
            this.eventListeners[0]();
            this.eventListeners.splice(0, 1);
        }
        this.eventListeners = [];
        if (this.maskProvider)
            this.maskProvider.onDestroy();
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "alpha", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "alphaNumeric", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "ascii", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "compare", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "compose", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "contains", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "creditCard", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "dataUri", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "different", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "digit", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "email", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "endsWith", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "even", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "extension", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "factor", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "fileSize", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "greaterThanEqualTo", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "greaterThan", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "hexColor", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "json", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "latitude", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "latLong", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "leapYear", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "lessThan", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "lessThanEqualTo", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "longitude", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "lowerCase", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "mac", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "maxDate", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "maxLength", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "maxNumber", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "minDate", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "minLength", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "minNumber", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "numeric", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "odd", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "password", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "port", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "primeNumber", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "required", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "range", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "rule", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "startsWith", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "time", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "upperCase", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "url", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "unique", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "notEmpty", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "cusip", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "grid", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "date", void 0);
    RxFormControlDirective = tslib_1.__decorate([
        Directive({
            selector: '[ngModel],[formControlName],[formControl]',
            providers: [NGMODEL_BINDING],
        }),
        tslib_1.__metadata("design:paramtypes", [ElementRef,
            Renderer2, DecimalProvider])
    ], RxFormControlDirective);
    return RxFormControlDirective;
}(BaseValidator));
export { RxFormControlDirective };
//# sourceMappingURL=data:application/json;base64,