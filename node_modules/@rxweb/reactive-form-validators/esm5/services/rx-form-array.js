import * as tslib_1 from "tslib";
import { FormArray } from "@angular/forms";
import { VALUE_CHANGED_SYNC, PATCH } from "../const/app.const";
import { isMatched, clone } from './entity.service';
import { ObjectMaker } from '../util/object-maker';
var PROP_ARRAY = "propArray";
var RxFormArray = /** @class */ (function (_super) {
    tslib_1.__extends(RxFormArray, _super);
    function RxFormArray(arrayObject, controls, validatorOrOpts, asyncValidator, arrayConfig) {
        var _this = _super.call(this, controls, validatorOrOpts, asyncValidator) || this;
        _this.arrayObject = arrayObject;
        _this.arrayConfig = arrayConfig;
        _this._isModified = false;
        _this._modified = [];
        _this.cloneObject(arrayObject);
        return _this;
    }
    Object.defineProperty(RxFormArray.prototype, "isModified", {
        get: function () {
            return this._isModified;
        },
        enumerable: true,
        configurable: true
    });
    RxFormArray.prototype.push = function (control) {
        var formGroup = this.root;
        if (this.arrayObject)
            if (control.modelInstance)
                this.arrayObject.push(control.modelInstance);
        _super.prototype.push.call(this, control);
        if (formGroup[VALUE_CHANGED_SYNC])
            formGroup.valueChangedSync();
        this.patch();
        this.checkValidation();
    };
    RxFormArray.prototype.patch = function () {
        this.checkModification();
        if (this.parent)
            this.parent[PATCH]();
    };
    RxFormArray.prototype.resetForm = function (options) {
        if (options && options.index >= 0 && options.groupOption) {
            this.controls[options.index].resetForm(options.groupOption);
        }
        else {
            for (var i = 0; i < this._baseValue.length; i++) {
                if (this.controls[i] !== undefined)
                    this.controls[i].resetForm({ value: this._baseValue[i] });
                else if (options && options.pushFunction) {
                    var formGroup = options.pushFunction(this._baseValue[i]);
                    this.push(formGroup);
                }
            }
        }
    };
    RxFormArray.prototype.commit = function () {
        var e_1, _a;
        this._baseValue = [];
        try {
            for (var _b = tslib_1.__values(this.controls), _c = _b.next(); !_c.done; _c = _b.next()) {
                var formGroup = _c.value;
                formGroup.commit();
                this._baseValue.push(clone(formGroup.value));
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        this.patch();
    };
    RxFormArray.prototype.removeAt = function (index) {
        var formGroup = this.root;
        this.arrayObject.splice(index, 1);
        _super.prototype.removeAt.call(this, index);
        if (formGroup[VALUE_CHANGED_SYNC])
            formGroup.valueChangedSync();
        this.patch();
        this.checkValidation();
    };
    RxFormArray.prototype.checkValidation = function () {
        var _this = this;
        setTimeout(function () {
            if (_this.arrayConfig != undefined && _this.arrayConfig.allowMaxIndex && _this.length > _this.arrayConfig.allowMaxIndex)
                _this.setErrors(ObjectMaker.toJson(PROP_ARRAY, _this.arrayConfig, [_this.length, _this.arrayConfig.allowMaxIndex]));
            else if (_this.errors && _this.errors[PROP_ARRAY])
                delete _this.errors[PROP_ARRAY];
        });
    };
    RxFormArray.prototype.checkModification = function () {
        this._isModified = !(this._baseValue.length == this.controls.length);
        if (!this._isModified)
            for (var i = 0; i < this.controls.length; i++) {
                this._isModified = isMatched(this._baseValue[i], this.controls[i].value);
                if (this._isModified)
                    break;
            }
    };
    RxFormArray.prototype.cloneObject = function (value) {
        var e_2, _a;
        this._baseValue = [];
        try {
            for (var value_1 = tslib_1.__values(value), value_1_1 = value_1.next(); !value_1_1.done; value_1_1 = value_1.next()) {
                var row = value_1_1.value;
                this._baseValue.push(clone(row));
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (value_1_1 && !value_1_1.done && (_a = value_1.return)) _a.call(value_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
    };
    return RxFormArray;
}(FormArray));
export { RxFormArray };
//# sourceMappingURL=data:application/json;base64,