import * as tslib_1 from "tslib";
function isObjectType(value) {
    return !(typeof value == "string" || typeof value === "number" || typeof value === "boolean" || value instanceof Date);
}
function isObject(value) {
    return Object.prototype.toString.call(value) === '[object Object]';
}
export function clone(jsonObject) {
    var e_1, _a;
    var jObject = {};
    if (isObjectType(jsonObject)) {
        for (var columnName in jsonObject) {
            if (Array.isArray(jsonObject[columnName])) {
                jObject[columnName] = [];
                try {
                    for (var _b = (e_1 = void 0, tslib_1.__values(jsonObject[columnName])), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var row = _c.value;
                        if (isObject(row))
                            jObject[columnName].push(clone(row));
                        else
                            jObject[columnName].push(row);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            else if (typeof jsonObject[columnName] == "object" && !(jsonObject[columnName] instanceof RegExp))
                jObject[columnName] = clone(jsonObject[columnName]);
            else
                jObject[columnName] = jsonObject[columnName];
        }
        return jObject;
    }
    else
        return jsonObject;
}
export function merge(firstObject, secondObject) {
    var e_2, _a;
    for (var columnName in secondObject) {
        if (Array.isArray(secondObject[columnName])) {
            if (!firstObject[columnName])
                firstObject[columnName] = [];
            try {
                for (var _b = (e_2 = void 0, tslib_1.__values(secondObject[columnName])), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var row = _c.value;
                    firstObject[columnName].push(clone(row));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        else if (typeof firstObject[columnName] == "object" && !(firstObject[columnName] instanceof RegExp))
            firstObject[columnName] = merge(firstObject[columnName], secondObject[columnName]);
        else
            firstObject[columnName] = secondObject[columnName];
    }
    return firstObject;
}
export function isMatched(jsonObject, compareObject) {
    var isModified = false;
    for (var columnName in compareObject) {
        if (Array.isArray(jsonObject[columnName])) {
            for (var i = 0; i < jsonObject[columnName].length; i++) {
                isModified = isMatched(jsonObject[columnName][i], compareObject[columnName][i]);
            }
        }
        else if (typeof jsonObject[columnName] == "object" && !(jsonObject[columnName] instanceof RegExp))
            isModified = isMatched(jsonObject[columnName], compareObject[columnName]);
        else
            isModified = !(jsonObject[columnName] == compareObject[columnName]);
        if (isModified)
            break;
    }
    return isModified;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5LnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Acnh3ZWIvcmVhY3RpdmUtZm9ybS12YWxpZGF0b3JzLyIsInNvdXJjZXMiOlsic2VydmljZXMvZW50aXR5LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLFNBQVMsWUFBWSxDQUFDLEtBQVM7SUFDM0IsT0FBTyxDQUFDLENBQUMsT0FBTyxLQUFLLElBQUksUUFBUSxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsSUFBSSxPQUFPLEtBQUssS0FBSyxTQUFTLElBQUksS0FBSyxZQUFZLElBQUksQ0FBQyxDQUFDO0FBQzNILENBQUM7QUFFRCxTQUFTLFFBQVEsQ0FBQyxLQUFVO0lBQ3hCLE9BQU8sTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLGlCQUFpQixDQUFDO0FBQ3ZFLENBQUM7QUFFRCxNQUFNLFVBQVUsS0FBSyxDQUFDLFVBQWtDOztJQUNwRCxJQUFJLE9BQU8sR0FBUSxFQUFFLENBQUM7SUFDdEIsSUFBSSxZQUFZLENBQUMsVUFBVSxDQUFDLEVBQUU7UUFDMUIsS0FBSyxJQUFJLFVBQVUsSUFBSSxVQUFVLEVBQUU7WUFDL0IsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFO2dCQUN2QyxPQUFPLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDOztvQkFDekIsS0FBZ0IsSUFBQSxvQkFBQSxpQkFBQSxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUEsQ0FBQSxnQkFBQSw0QkFBRTt3QkFBbkMsSUFBSSxHQUFHLFdBQUE7d0JBQ1IsSUFBSSxRQUFRLENBQUMsR0FBRyxDQUFDOzRCQUNiLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7OzRCQUVwQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFBO3FCQUNwQzs7Ozs7Ozs7O2FBQ0o7aUJBQU0sSUFBSSxPQUFPLFVBQVUsQ0FBQyxVQUFVLENBQUMsSUFBSSxRQUFRLElBQUksQ0FBQyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsWUFBWSxNQUFNLENBQUM7Z0JBQy9GLE9BQU8sQ0FBQyxVQUFVLENBQUMsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7O2dCQUVwRCxPQUFPLENBQUMsVUFBVSxDQUFDLEdBQUcsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFBO1NBQ25EO1FBQ0QsT0FBTyxPQUFPLENBQUM7S0FDbEI7O1FBRUcsT0FBTyxVQUFVLENBQUM7QUFDdEIsQ0FBQztBQUVMLE1BQU0sVUFBVSxLQUFLLENBQUMsV0FBbUMsRUFBRSxZQUFvQzs7SUFDdkYsS0FBSyxJQUFJLFVBQVUsSUFBSSxZQUFZLEVBQUU7UUFDakMsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFO1lBQ3pDLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDO2dCQUN4QixXQUFXLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDOztnQkFDakMsS0FBZ0IsSUFBQSxvQkFBQSxpQkFBQSxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUEsQ0FBQSxnQkFBQTtvQkFBbkMsSUFBSSxHQUFHLFdBQUE7b0JBQ1IsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtpQkFBQTs7Ozs7Ozs7O1NBQy9DO2FBQU0sSUFBSSxPQUFPLFdBQVcsQ0FBQyxVQUFVLENBQUMsSUFBSSxRQUFRLElBQUksQ0FBQyxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsWUFBWSxNQUFNLENBQUM7WUFDakcsV0FBVyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLEVBQUUsWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUE7O1lBRWxGLFdBQVcsQ0FBQyxVQUFVLENBQUMsR0FBRyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUM7S0FDMUQ7SUFDRCxPQUFPLFdBQVcsQ0FBQztBQUMzQixDQUFDO0FBRUQsTUFBTSxVQUFVLFNBQVMsQ0FBQyxVQUFrQyxFQUFFLGFBQXFDO0lBQy9GLElBQUksVUFBVSxHQUFZLEtBQUssQ0FBQztJQUNoQyxLQUFLLElBQUksVUFBVSxJQUFJLGFBQWEsRUFBRTtRQUM5QixJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUU7WUFDdkMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3BELFVBQVUsR0FBRyxTQUFTLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO2FBQ2xGO1NBQ0o7YUFBTSxJQUFJLE9BQU8sVUFBVSxDQUFDLFVBQVUsQ0FBQyxJQUFJLFFBQVEsSUFBSSxDQUFDLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxZQUFZLE1BQU0sQ0FBQztZQUMvRixVQUFVLEdBQUcsU0FBUyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsRUFBRSxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQzs7WUFFMUUsVUFBVSxHQUFHLENBQUMsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLElBQUksYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFDeEUsSUFBSSxVQUFVO1lBQ1YsTUFBTTtLQUNqQjtJQUNHLE9BQU8sVUFBVSxDQUFDO0FBQzFCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBpc09iamVjdFR5cGUodmFsdWU6YW55KSB7XHJcbiAgICByZXR1cm4gISh0eXBlb2YgdmFsdWUgPT0gXCJzdHJpbmdcIiB8fCB0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIgfHwgdHlwZW9mIHZhbHVlID09PSBcImJvb2xlYW5cIiB8fCB2YWx1ZSBpbnN0YW5jZW9mIERhdGUpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZTogYW55KTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSc7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjbG9uZShqc29uT2JqZWN0OiB7IFtrZXk6IHN0cmluZ106IGFueSB9KSB7XHJcbiAgICBsZXQgak9iamVjdDogYW55ID0ge307XHJcbiAgICBpZiAoaXNPYmplY3RUeXBlKGpzb25PYmplY3QpKSB7XHJcbiAgICAgICAgZm9yICh2YXIgY29sdW1uTmFtZSBpbiBqc29uT2JqZWN0KSB7XHJcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGpzb25PYmplY3RbY29sdW1uTmFtZV0pKSB7XHJcbiAgICAgICAgICAgICAgICBqT2JqZWN0W2NvbHVtbk5hbWVdID0gW107XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCByb3cgb2YganNvbk9iamVjdFtjb2x1bW5OYW1lXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc09iamVjdChyb3cpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBqT2JqZWN0W2NvbHVtbk5hbWVdLnB1c2goY2xvbmUocm93KSlcclxuICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGpPYmplY3RbY29sdW1uTmFtZV0ucHVzaChyb3cpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGpzb25PYmplY3RbY29sdW1uTmFtZV0gPT0gXCJvYmplY3RcIiAmJiAhKGpzb25PYmplY3RbY29sdW1uTmFtZV0gaW5zdGFuY2VvZiBSZWdFeHApKVxyXG4gICAgICAgICAgICAgICAgak9iamVjdFtjb2x1bW5OYW1lXSA9IGNsb25lKGpzb25PYmplY3RbY29sdW1uTmFtZV0pO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICBqT2JqZWN0W2NvbHVtbk5hbWVdID0ganNvbk9iamVjdFtjb2x1bW5OYW1lXVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gak9iamVjdDtcclxuICAgIH1cclxuICAgIGVsc2VcclxuICAgICAgICByZXR1cm4ganNvbk9iamVjdDtcclxuICAgIH1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBtZXJnZShmaXJzdE9iamVjdDogeyBba2V5OiBzdHJpbmddOiBhbnkgfSwgc2Vjb25kT2JqZWN0OiB7IFtrZXk6IHN0cmluZ106IGFueSB9KSB7XHJcbiAgICAgICAgZm9yICh2YXIgY29sdW1uTmFtZSBpbiBzZWNvbmRPYmplY3QpIHtcclxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc2Vjb25kT2JqZWN0W2NvbHVtbk5hbWVdKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFmaXJzdE9iamVjdFtjb2x1bW5OYW1lXSlcclxuICAgICAgICAgICAgICAgICAgICBmaXJzdE9iamVjdFtjb2x1bW5OYW1lXSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgcm93IG9mIHNlY29uZE9iamVjdFtjb2x1bW5OYW1lXSlcclxuICAgICAgICAgICAgICAgICAgICBmaXJzdE9iamVjdFtjb2x1bW5OYW1lXS5wdXNoKGNsb25lKHJvdykpXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGZpcnN0T2JqZWN0W2NvbHVtbk5hbWVdID09IFwib2JqZWN0XCIgJiYgIShmaXJzdE9iamVjdFtjb2x1bW5OYW1lXSBpbnN0YW5jZW9mIFJlZ0V4cCkpXHJcbiAgICAgICAgICAgICAgICBmaXJzdE9iamVjdFtjb2x1bW5OYW1lXSA9IG1lcmdlKGZpcnN0T2JqZWN0W2NvbHVtbk5hbWVdLCBzZWNvbmRPYmplY3RbY29sdW1uTmFtZV0pXHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIGZpcnN0T2JqZWN0W2NvbHVtbk5hbWVdID0gc2Vjb25kT2JqZWN0W2NvbHVtbk5hbWVdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmlyc3RPYmplY3Q7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc01hdGNoZWQoanNvbk9iamVjdDogeyBba2V5OiBzdHJpbmddOiBhbnkgfSwgY29tcGFyZU9iamVjdDogeyBba2V5OiBzdHJpbmddOiBhbnkgfSkge1xyXG4gICAgbGV0IGlzTW9kaWZpZWQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIGZvciAodmFyIGNvbHVtbk5hbWUgaW4gY29tcGFyZU9iamVjdCkge1xyXG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShqc29uT2JqZWN0W2NvbHVtbk5hbWVdKSkge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBqc29uT2JqZWN0W2NvbHVtbk5hbWVdLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXNNb2RpZmllZCA9IGlzTWF0Y2hlZChqc29uT2JqZWN0W2NvbHVtbk5hbWVdW2ldLCBjb21wYXJlT2JqZWN0W2NvbHVtbk5hbWVdW2ldKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBqc29uT2JqZWN0W2NvbHVtbk5hbWVdID09IFwib2JqZWN0XCIgJiYgIShqc29uT2JqZWN0W2NvbHVtbk5hbWVdIGluc3RhbmNlb2YgUmVnRXhwKSlcclxuICAgICAgICAgICAgICAgIGlzTW9kaWZpZWQgPSBpc01hdGNoZWQoanNvbk9iamVjdFtjb2x1bW5OYW1lXSwgY29tcGFyZU9iamVjdFtjb2x1bW5OYW1lXSk7XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIGlzTW9kaWZpZWQgPSAhKGpzb25PYmplY3RbY29sdW1uTmFtZV0gPT0gY29tcGFyZU9iamVjdFtjb2x1bW5OYW1lXSk7XHJcbiAgICAgICAgICAgIGlmIChpc01vZGlmaWVkKVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgICAgICAgcmV0dXJuIGlzTW9kaWZpZWQ7XHJcbn1cclxuIl19