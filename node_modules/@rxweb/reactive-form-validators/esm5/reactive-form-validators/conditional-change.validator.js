import { ObjectMaker } from "../util/object-maker";
import { ApplicationUtil } from "../util/app-util";
export function conditionalChangeValidator(conditionalValidationProps) {
    var timeOuts = [];
    var oldValue = undefined;
    var setTimeOut = function (control) {
        var timeOut = setTimeout(function (t) {
            clearTimeout(timeOut);
            control.updateValueAndValidity();
        }, 100);
    };
    return function (control) {
        var value = control.value;
        if (control.parent && oldValue != value) {
            var rootFormGroup_1 = ApplicationUtil.getRootFormGroup(control);
            var parentFormGroup_1 = control.parent;
            oldValue = value;
            timeOuts = [];
            conditionalValidationProps.forEach(function (t) {
                var a = control;
                if (t.indexOf("[]") != -1) {
                    var splitText = t.split("[]");
                    var formArray = rootFormGroup_1.get([splitText[0]]);
                    if (formArray)
                        formArray.controls.forEach(function (formGroup) {
                            var abstractControl = formGroup.get(splitText[1]);
                            if (abstractControl) {
                                setTimeOut(abstractControl);
                            }
                        });
                }
                else {
                    var splitText_1 = t.split('.');
                    if (splitText_1.length > 1) {
                        var control = null;
                        t.split('.').forEach(function (name, index) { control = (index == 0) ? rootFormGroup_1.controls[name] : control.controls[name]; });
                    }
                    else {
                        control = parentFormGroup_1.controls[t];
                    }
                    if (control) {
                        setTimeOut(control);
                    }
                }
            });
        }
        return ObjectMaker.null();
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZGl0aW9uYWwtY2hhbmdlLnZhbGlkYXRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0ByeHdlYi9yZWFjdGl2ZS1mb3JtLXZhbGlkYXRvcnMvIiwic291cmNlcyI6WyJyZWFjdGl2ZS1mb3JtLXZhbGlkYXRvcnMvY29uZGl0aW9uYWwtY2hhbmdlLnZhbGlkYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFPQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbkQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGtCQUFrQixDQUFBO0FBR2xELE1BQU0sVUFBVSwwQkFBMEIsQ0FBQywwQkFBb0M7SUFDN0UsSUFBSSxRQUFRLEdBQWEsRUFBRSxDQUFDO0lBQzVCLElBQUksUUFBUSxHQUFXLFNBQVMsQ0FBQztJQUNqQyxJQUFJLFVBQVUsR0FBRyxVQUFDLE9BQXdCO1FBQ3hDLElBQUksT0FBTyxHQUFHLFVBQVUsQ0FBQyxVQUFBLENBQUM7WUFDeEIsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3RCLE9BQU8sQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO1FBQ25DLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQTtJQUNULENBQUMsQ0FBQTtJQUNELE9BQU8sVUFBQyxPQUF3QjtRQUM5QixJQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDO1FBQzFCLElBQUksT0FBTyxDQUFDLE1BQU0sSUFBSSxRQUFRLElBQUksS0FBSyxFQUFFO1lBQ3JDLElBQU0sZUFBYSxHQUFHLGVBQWUsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNoRSxJQUFNLGlCQUFlLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQztZQUV6QyxRQUFRLEdBQUcsS0FBSyxDQUFDO1lBQ2pCLFFBQVEsR0FBRyxFQUFFLENBQUM7WUFDZCwwQkFBMEIsQ0FBQyxPQUFPLENBQUMsVUFBQSxDQUFDO2dCQUNsQyxJQUFJLENBQUMsR0FBRyxPQUFPLENBQUM7Z0JBQ2hCLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRTtvQkFDdkIsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztvQkFDaEMsSUFBSSxTQUFTLEdBQWMsZUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQzdELElBQUksU0FBUzt3QkFDWCxTQUFTLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxVQUFBLFNBQVM7NEJBQ2xDLElBQUksZUFBZSxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7NEJBQ2xELElBQUksZUFBZSxFQUFFO2dDQUNuQixVQUFVLENBQUMsZUFBZSxDQUFDLENBQUM7NkJBQzdCO3dCQUNILENBQUMsQ0FBQyxDQUFBO2lCQUNMO3FCQUFNO29CQUVILElBQUksV0FBUyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7b0JBQzdCLElBQUcsV0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUM7d0JBQ3RCLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQzt3QkFDbkIsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQyxJQUFJLEVBQUUsS0FBSyxJQUFPLE9BQU8sR0FBRyxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsZUFBYSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO3FCQUMzSDt5QkFDRTt3QkFDSCxPQUFPLEdBQUcsaUJBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7cUJBQ3ZDO29CQUVELElBQUksT0FBTyxFQUFFO3dCQUNYLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztxQkFDckI7aUJBQ0Y7WUFDSCxDQUFDLENBQUMsQ0FBQTtTQUNIO1FBQ0QsT0FBTyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDNUIsQ0FBQyxDQUFBO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgVmFsaWRhdG9yRm4sXHJcbiAgQWJzdHJhY3RDb250cm9sLFxyXG5cclxuICBGb3JtQXJyYXlcclxufSBmcm9tIFwiQGFuZ3VsYXIvZm9ybXNcIjtcclxuXHJcbmltcG9ydCB7IE9iamVjdE1ha2VyIH0gZnJvbSBcIi4uL3V0aWwvb2JqZWN0LW1ha2VyXCI7XHJcbmltcG9ydCB7IEFwcGxpY2F0aW9uVXRpbCB9IGZyb20gXCIuLi91dGlsL2FwcC11dGlsXCJcclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY29uZGl0aW9uYWxDaGFuZ2VWYWxpZGF0b3IoY29uZGl0aW9uYWxWYWxpZGF0aW9uUHJvcHM6IHN0cmluZ1tdKTogVmFsaWRhdG9yRm4ge1xyXG4gIHZhciB0aW1lT3V0czogbnVtYmVyW10gPSBbXTtcclxuICB2YXIgb2xkVmFsdWU6IHN0cmluZyA9IHVuZGVmaW5lZDtcclxuICB2YXIgc2V0VGltZU91dCA9IChjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpID0+IHtcclxuICAgIHZhciB0aW1lT3V0ID0gc2V0VGltZW91dCh0ID0+IHtcclxuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVPdXQpO1xyXG4gICAgICBjb250cm9sLnVwZGF0ZVZhbHVlQW5kVmFsaWRpdHkoKTtcclxuICAgIH0sIDEwMClcclxuICB9XHJcbiAgcmV0dXJuIChjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiB7IFtrZXk6IHN0cmluZ106IGFueSB9ID0+IHtcclxuICAgIGxldCB2YWx1ZSA9IGNvbnRyb2wudmFsdWU7XHJcbiAgICBpZiAoY29udHJvbC5wYXJlbnQgJiYgb2xkVmFsdWUgIT0gdmFsdWUpIHtcclxuICAgICAgICBjb25zdCByb290Rm9ybUdyb3VwID0gQXBwbGljYXRpb25VdGlsLmdldFJvb3RGb3JtR3JvdXAoY29udHJvbCk7XHJcbiAgICAgICAgY29uc3QgcGFyZW50Rm9ybUdyb3VwID0gY29udHJvbC5wYXJlbnQ7XHJcblxyXG4gICAgICBvbGRWYWx1ZSA9IHZhbHVlO1xyXG4gICAgICB0aW1lT3V0cyA9IFtdO1xyXG4gICAgICBjb25kaXRpb25hbFZhbGlkYXRpb25Qcm9wcy5mb3JFYWNoKHQgPT4ge1xyXG4gICAgICAgIGxldCBhID0gY29udHJvbDtcclxuICAgICAgICBpZiAodC5pbmRleE9mKFwiW11cIikgIT0gLTEpIHtcclxuICAgICAgICAgICAgdmFyIHNwbGl0VGV4dCA9IHQuc3BsaXQoXCJbXVwiKTtcclxuICAgICAgICAgIHZhciBmb3JtQXJyYXkgPSA8Rm9ybUFycmF5PnJvb3RGb3JtR3JvdXAuZ2V0KFtzcGxpdFRleHRbMF1dKTtcclxuICAgICAgICAgIGlmIChmb3JtQXJyYXkpXHJcbiAgICAgICAgICAgIGZvcm1BcnJheS5jb250cm9scy5mb3JFYWNoKGZvcm1Hcm91cCA9PiB7XHJcbiAgICAgICAgICAgICAgdmFyIGFic3RyYWN0Q29udHJvbCA9IGZvcm1Hcm91cC5nZXQoc3BsaXRUZXh0WzFdKTtcclxuICAgICAgICAgICAgICBpZiAoYWJzdHJhY3RDb250cm9sKSB7XHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lT3V0KGFic3RyYWN0Q29udHJvbCk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBsZXQgc3BsaXRUZXh0ID0gdC5zcGxpdCgnLicpO1xyXG4gICAgICAgICAgICBpZihzcGxpdFRleHQubGVuZ3RoID4gMSl7XHJcbiAgICAgICAgICAgICAgdmFyIGNvbnRyb2wgPSBudWxsO1xyXG4gICAgICAgICAgICAgIHQuc3BsaXQoJy4nKS5mb3JFYWNoKChuYW1lLCBpbmRleCkgPT4geyBjb250cm9sID0gKGluZGV4ID09IDApID8gcm9vdEZvcm1Hcm91cC5jb250cm9sc1tuYW1lXSA6IGNvbnRyb2wuY29udHJvbHNbbmFtZV07IH0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb250cm9sID0gcGFyZW50Rm9ybUdyb3VwLmNvbnRyb2xzW3RdO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICBpZiAoY29udHJvbCkge1xyXG4gICAgICAgICAgICBzZXRUaW1lT3V0KGNvbnRyb2wpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgIH1cclxuICAgIHJldHVybiBPYmplY3RNYWtlci5udWxsKCk7XHJcbiAgfVxyXG59XHJcbiJdfQ==